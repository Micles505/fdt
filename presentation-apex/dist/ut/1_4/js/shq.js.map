{"version":3,"sources":["apex_date.js","cke.js","date.js","datepicker.js","dem.js","dem_public.js","fdt.js","gpr.js","pil.js","polyfill.js","psa.js","shq.js","shq_dialog.js","shq_ig.js","shq_ig_action.js","shq_ig_navgt.js","shq_ig_selection.js","shq_item.js","shq_page.js","shq_region.js","shq_utl_menu.js","shq_utl_portail.js"],"names":[],"mappingspuzhjcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrpunhmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"shq.js","sourcesContent":["/*!\r\n Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.\r\n */\r\n/**\r\n * @namespace apex.date\r\n * @since 21.2\r\n * @desc\r\n * <p>The apex.date namespace contains Oracle APEX functions related to date operations.</p>\r\n */\r\n\r\nvar apex = apex || {};\r\napex.date = {};\r\n\r\n(function (date, locale, lang) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * <p>Constants for the different date/time units used by apex.date functions.</p>\r\n     *\r\n     * @member {object} UNIT\r\n     * @memberof apex.date\r\n     * @property {string} MILLISECOND Constant to use for milliseconds\r\n     * @property {string} SECOND Constant to use for seconds\r\n     * @property {string} MINUTE Constant to use for minutes\r\n     * @property {string} HOUR Constant to use for hours\r\n     * @property {string} DAY Constant to use for days\r\n     * @property {string} WEEK Constant to use for weeks\r\n     * @property {string} MONTH Constant to use for months\r\n     * @property {string} YEAR Constant to use for years\r\n     *\r\n     * @example <caption>apex.date.UNIT constant</caption>\r\n     *\r\n     * apex.date.UNIT = {\r\n     *     MILLISECOND: \"millisecond\",\r\n     *     SECOND: \"second\",\r\n     *     MINUTE: \"minute\",\r\n     *     HOUR: \"hour\",\r\n     *     DAY: \"day\",\r\n     *     WEEK: \"week\",\r\n     *     MONTH: \"month\",\r\n     *     YEAR: \"year\"\r\n     * };\r\n     *\r\n     * @example <caption>Example usage</caption>\r\n     *\r\n     * apex.date.add( myDate, 2, apex.date.UNIT.DAY );\r\n     * apex.date.add( myDate, 1, apex.date.UNIT.YEAR );\r\n     * apex.date.subtract( myDate, 30, apex.date.UNIT.MINUTE );\r\n     * apex.date.subtract( myDate, 6, apex.date.UNIT.HOUR );\r\n     */\r\n    date.UNIT = {\r\n        MILLISECOND: \"millisecond\",\r\n        SECOND: \"second\",\r\n        MINUTE: \"minute\",\r\n        HOUR: \"hour\",\r\n        DAY: \"day\",\r\n        WEEK: \"week\",\r\n        MONTH: \"month\",\r\n        YEAR: \"year\"\r\n    };\r\n\r\n    date.DEFAULT_DATE_FORMAT = \"YYYY-MM-DD\";\r\n\r\n    // helper function to prepare & normalize dates for some comparing functions\r\n    function prepareCompareDate(pDate, pUnit) {\r\n        var localDate;\r\n\r\n        if (pUnit === date.UNIT.YEAR) {\r\n            localDate = new Date(pDate.getFullYear(), 0, 1, 0, 0, 0, 0);\r\n        } else if (pUnit === date.UNIT.MONTH) {\r\n            localDate = new Date(pDate.getFullYear(), pDate.getMonth(), 1, 0, 0, 0, 0);\r\n        } else if (pUnit === date.UNIT.WEEK) {\r\n            localDate = new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate(), 0, 0, 0, 0);\r\n        } else if (pUnit === date.UNIT.DAY) {\r\n            localDate = new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate(), 0, 0, 0, 0);\r\n        } else if (pUnit === date.UNIT.HOUR) {\r\n            localDate = new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate(), pDate.getHours(), 0, 0, 0);\r\n        } else if (pUnit === date.UNIT.MINUTE) {\r\n            localDate = new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate(), pDate.getHours(), pDate.getMinutes(), 0, 0);\r\n        } else if (pUnit === date.UNIT.SECOND) {\r\n            localDate = new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate(), pDate.getHours(), pDate.getMinutes(), pDate.getSeconds(), 0);\r\n        } else if (pUnit === date.UNIT.MILLISECOND) {\r\n            localDate = new Date(pDate.getFullYear(), pDate.getMonth(), pDate.getDate(), pDate.getHours(), pDate.getMinutes(), pDate.getSeconds(), pDate.getMilliseconds());\r\n        }\r\n\r\n        return localDate;\r\n    }\r\n\r\n    /**\r\n     * <p>Return true if a given object is a valid date object.</p>\r\n     *\r\n     * @function isValid\r\n     * @memberof apex.date\r\n     * @param {Date} pDate A date object\r\n     * @return {boolean} is it a valid date\r\n     *\r\n     * @example <caption>Returns if a date object is valid.</caption>\r\n     *\r\n     * var isDateValid = apex.date.isValid( myDate );\r\n     */\r\n    date.isValid = function (pDate) {\r\n        return pDate instanceof Date && !isNaN(pDate);\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if a given string can parse into a date object.\r\n     * <em>Note: This could be browser specific dependent on the implementation of Date.parse.</em></p>\r\n     * <p>Most browsers expect a string in ISO format (ISO 8601) and shorter versions of it, like \"2021-06-15T14:30:00\" or\r\n     * \"2021-06-15T14:30\" or \"2021-06-15\"</p>\r\n     *\r\n     * @function isValidString\r\n     * @memberof apex.date\r\n     * @param {string} pDateString A date string\r\n     * @return {boolean} is it a valid date\r\n     *\r\n     * @example <caption>Returns if a date string is valid.</caption>\r\n     *\r\n     * var isDateValid = apex.date.isValidString( \"2021-06-29 15:30\" );\r\n     */\r\n    date.isValidString = function (pDateString) {\r\n        return !isNaN(Date.parse(pDateString));\r\n    };\r\n\r\n    /**\r\n     * <p>Return the cloned instance of a given date object.\r\n     * This is useful when you want to do actions on a date object without altering the original object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function clone\r\n     * @memberof apex.date\r\n     * @param {Date} pDate A date object\r\n     * @return {Date} The cloned date object\r\n     *\r\n     * @example <caption>Returns the clone of a given date object.</caption>\r\n     *\r\n     * var myDate = new Date();\r\n     * var clonedDate = apex.date.clone( myDate );\r\n     */\r\n    date.clone = function (pDate) {\r\n        return new Date(pDate.getTime());\r\n    };\r\n\r\n    /**\r\n     * <p>Add a certain amount of time to an existing date.\r\n     * This function returns the modified date object as well as altering the original object.\r\n     * If the given date object should not be manipulated use {@link apex.date.clone} before calling this function.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function add\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @param {number} pAmount The amount to add\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {Date} The modified date object\r\n     *\r\n     * @example <caption>Returns the modified date object.</caption>\r\n     *\r\n     * var myDate = new Date( \"2021-06-20\" );\r\n     * myDate = apex.date.add( myDate, 2, apex.date.UNIT.DAY );\r\n     * // myDate is now \"2021-06-21\"\r\n     */\r\n    date.add = function (pDate, pAmount, pUnit) {\r\n        var localDate = pDate || new Date();\r\n\r\n        function addMonths(pDate, pAmount) {\r\n            var day = pDate.getDate();\r\n            pDate.setMonth(pDate.getMonth() + pAmount);\r\n            if (pDate.getDate() !== day) {\r\n                pDate.setDate(0);\r\n            }\r\n            return pDate;\r\n        }\r\n\r\n        if (pUnit === date.UNIT.YEAR) {\r\n            localDate.setFullYear(localDate.getFullYear() + pAmount);\r\n        } else if (pUnit === date.UNIT.MONTH) {\r\n            localDate = addMonths(localDate, pAmount);\r\n        } else if (pUnit === date.UNIT.WEEK) {\r\n            localDate.setDate(localDate.getDate() + 7 * pAmount);\r\n        } else if (pUnit === date.UNIT.DAY) {\r\n            localDate.setDate(localDate.getDate() + pAmount);\r\n        } else if (pUnit === date.UNIT.HOUR) {\r\n            localDate.setHours(localDate.getHours() + pAmount);\r\n        } else if (pUnit === date.UNIT.MINUTE) {\r\n            localDate.setTime(localDate.getTime() + 1000 * 60 * pAmount);\r\n        } else if (pUnit === date.UNIT.SECOND) {\r\n            localDate.setTime(localDate.getTime() + 1000 * pAmount);\r\n        } else if (pUnit === date.UNIT.MILLISECOND) {\r\n            localDate.setTime(localDate.getTime() + pAmount);\r\n        }\r\n\r\n        return localDate;\r\n    };\r\n\r\n    /**\r\n     * <p>Subtract a certain amount of time of an existing date.\r\n     * This function returns the modified date object as well as altering the original object.\r\n     * If the given date object should not be manipulated use {@link apex.date.clone} before calling this function.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function subtract\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @param {number} pAmount The amount to subtract\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {Date} The modified date object\r\n     *\r\n     * @example <caption>Returns the modified date object.</caption>\r\n     *\r\n     * var myDate = new Date( \"2021-06-20\" )\r\n     * myDate = apex.date.subtract( myDate, 2, apex.date.UNIT.DAY );\r\n     * // myDate is now \"2021-06-19\"\r\n     */\r\n    date.subtract = function (pDate, pAmount, pUnit) {\r\n        var localDate = pDate || new Date();\r\n\r\n        localDate = date.add(localDate, -pAmount, pUnit);\r\n\r\n        return localDate;\r\n    };\r\n\r\n    /**\r\n     * <p>Return the ISO-8601 week number of the year of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function ISOWeek\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {number} The week number\r\n     *\r\n     * @example <caption>Returns the ISO-8601 week number.</caption>\r\n     *\r\n     * var weekNumber = apex.date.ISOWeek( myDate );\r\n     */\r\n    date.ISOWeek = function (pDate) {\r\n        var localDate = date.clone(pDate || new Date()),\r\n            dayn = (localDate.getDay() + 6) % 7,\r\n            firstThursday;\r\n\r\n        localDate.setDate(localDate.getDate() - dayn + 3);\r\n        firstThursday = localDate.valueOf();\r\n        localDate.setMonth(0, 1);\r\n\r\n        if (localDate.getDay() !== 4) {\r\n            localDate.setMonth(0, 1 + ((4 - localDate.getDay() + 7) % 7));\r\n        }\r\n\r\n        return 1 + Math.ceil((firstThursday - localDate) / 604800000);\r\n    };\r\n\r\n    /**\r\n     * <p>Return the week number of a month of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function weekOfMonth\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {number} The week number\r\n     *\r\n     * @example <caption>Returns the week number of given month.</caption>\r\n     *\r\n     * var weekNumber = apex.date.weekOfMonth( myDate );\r\n     */\r\n    date.weekOfMonth = function (pDate) {\r\n        var localDate = date.clone(pDate || new Date());\r\n\r\n        localDate.setDate(localDate.getDate() - localDate.getDay() + 1);\r\n\r\n        return Math.ceil(localDate.getDate() / 7);\r\n    };\r\n\r\n    /**\r\n     * <p>Return the day count of a month of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function daysInMonth\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {number} The days count\r\n     *\r\n     * @example <caption>Returns the day count of given month.</caption>\r\n     *\r\n     * var dayCount = apex.date.daysInMonth( myDate );\r\n     */\r\n    date.daysInMonth = function (pDate) {\r\n        var localDate = pDate || new Date();\r\n\r\n        return new Date(localDate.getFullYear(), localDate.getMonth() + 1, 0).getDate();\r\n    };\r\n\r\n    /**\r\n     * <p>Return the day number of week of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function dayOfWeek\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {number} The day number\r\n     *\r\n     * @example <caption>Returns the day number of given week.</caption>\r\n     *\r\n     * var weekDay = apex.date.dayOfWeek( myDate );\r\n     */\r\n    date.dayOfWeek = function (pDate) {\r\n        var localDate = pDate || new Date();\r\n\r\n        return localDate.getDay() === 0 ? 7 : localDate.getDay();\r\n    };\r\n\r\n    /**\r\n     * <p>Return the day number of a year of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function getDayOfYear\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {number} The day number\r\n     *\r\n     * @example <caption>Returns the day number of given year.</caption>\r\n     *\r\n     * var dayNumber = apex.date.getDayOfYear( myDate );\r\n     */\r\n    date.getDayOfYear = function (pDate) {\r\n        var localDate = pDate || new Date(),\r\n            start = new Date(localDate.getFullYear(), 0, 0),\r\n            diff = localDate - start,\r\n            oneDay = 1000 * 60 * 60 * 24;\r\n\r\n        return Math.floor(diff / oneDay);\r\n    };\r\n\r\n    /**\r\n     * <p>Set the day number of a year of a given date object.\r\n     * If the given date object should not be manipulated use {@link apex.date.clone} before calling this function.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function setDayOfYear\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @param {number} pDay The day number\r\n     * @return {Date} The date object\r\n     *\r\n     * @example <caption>Returns the date object.</caption>\r\n     *\r\n     * var myDate = new Date();\r\n     * apex.date.setDayOfYear( myDate, 126 );\r\n     */\r\n    date.setDayOfYear = function (pDate, pDay) {\r\n        var localDate = pDate || new Date();\r\n        localDate.setMonth(0, pDay);\r\n    };\r\n\r\n    /**\r\n     * <p>Return the seconds past midnight of day of a given date object.</p>\r\n     *\r\n     * @function secondsPastMidnight\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {number} seconds past midnight\r\n     *\r\n     * @example <caption>Returns the seconds past midnight.</caption>\r\n     *\r\n     * var seconds = apex.date.secondsPastMidnight( myDate );\r\n     */\r\n    date.secondsPastMidnight = function (pDate) {\r\n        var localDate = date.clone(pDate || new Date());\r\n\r\n        return Math.round((date.clone(localDate) - localDate.setHours(0, 0, 0, 0)) / 1000, 0);\r\n    };\r\n\r\n    /**\r\n     * <p>Return a new date object for the first day a month of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function firstOfMonth\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {Date} The first day as date\r\n     *\r\n     * @example <caption>Returns the first day of a given month as date object.</caption>\r\n     *\r\n     * var firstDayDate = apex.date.firstOfMonth( myDate );\r\n     * // output: \"2021-JUN-01\" (as date object)\r\n     */\r\n    date.firstOfMonth = function (pDate) {\r\n        var localDate = pDate || new Date();\r\n\r\n        return new Date(localDate.getFullYear(), localDate.getMonth(), 1);\r\n    };\r\n\r\n    /**\r\n     * <p>Return a new date object for the last day of a month of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function lastOfMonth\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {Date} The last day as date\r\n     *\r\n     * @example <caption>Returns the last day of a given month as date.</caption>\r\n     *\r\n     * var lastDayDate = apex.date.lastOfMonth( myDate );\r\n     * // output: \"2021-JUN-30\" (as date object)\r\n     */\r\n    date.lastOfMonth = function (pDate) {\r\n        var localDate = pDate || new Date();\r\n\r\n        return new Date(localDate.getFullYear(), localDate.getMonth() + 1, 0);\r\n    };\r\n\r\n    /**\r\n     * <p>Return the start date of a day of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function startOfDay\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {Date} The start date of a day\r\n     *\r\n     * @example <caption>Returns the start date of a given day.</caption>\r\n     *\r\n     * var dayStartDate = apex.date.startOfDay( myDate );\r\n     * // output: \"2021-JUN-29 24:00:00\" (as date object)\r\n     */\r\n    date.startOfDay = function (pDate) {\r\n        var localDate = pDate || new Date();\r\n\r\n        return new Date(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), 0, 0, 0, 0);\r\n    };\r\n\r\n    /**\r\n     * <p>Return the end date of a day of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function endOfDay\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {Date} The end date of a day\r\n     *\r\n     * @example <caption>Returns the end date of a given day.</caption>\r\n     *\r\n     * var dayEndDate = apex.date.endOfDay( myDate );\r\n     * // output: \"2021-JUN-29 23:59:59\" (as date object)\r\n     */\r\n    date.endOfDay = function (pDate) {\r\n        var localDate = pDate || new Date();\r\n\r\n        return new Date(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), 23, 59, 59, 999);\r\n    };\r\n\r\n    /**\r\n     * <p>Return the count of months between 2 date objects.</p>\r\n     *\r\n     * @function monthsBetween\r\n     * @memberof apex.date\r\n     * @param {Date} pDate1 A date object\r\n     * @param {Date} pDate2 A date object\r\n     * @return {number} The month count\r\n     *\r\n     * @example <caption>Returns the count of months between 2 dates.</caption>\r\n     *\r\n     * var months = apex.date.monthsBetween( myDate1, myDate2 );\r\n     */\r\n    date.monthsBetween = function (pDate1, pDate2) {\r\n        var months;\r\n\r\n        months = (pDate2.getFullYear() - pDate1.getFullYear()) * 12;\r\n        months -= pDate1.getMonth();\r\n        months += pDate2.getMonth();\r\n\r\n        return Math.abs(months);\r\n    };\r\n\r\n    /**\r\n     * <p>Return the minimum date of given date object arguments.\r\n     * If <em>pDates</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function min\r\n     * @memberof apex.date\r\n     * @param {date} [pDates=[new Date()]] Multiple date objects as arguments\r\n     * @return {Date} The min date object\r\n     *\r\n     * @example <caption>Returns the minimum (most distant future) of the given date.</caption>\r\n     *\r\n     * var minDate = apex.date.min( myDate1, myDate2, myDate3 );\r\n     */\r\n    date.min = function (pDates) {\r\n        var dateArray = pDates || [new Date()];\r\n\r\n        return new Date(Math.min.apply(null, dateArray));\r\n    };\r\n\r\n    /**\r\n     * <p>Return the maximum date of given date object arguments.\r\n     * If <em>pDates</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function max\r\n     * @memberof apex.date\r\n     * @param {date} [pDates=[new Date()]] Multiple date objects as arguments\r\n     * @return {Date} The max date object\r\n     *\r\n     * @example <caption>Returns the maximum (most distant future) of the given date.</caption>\r\n     *\r\n     * var maxDate = apex.date.max( myDate1, myDate2, myDate3 );\r\n     */\r\n    date.max = function (pDates) {\r\n        var dateArray = pDates || [new Date()];\r\n\r\n        return new Date(Math.max.apply(null, dateArray));\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if the first date object is before the second date.\r\n     * <em>pUnit</em> controls the precision of the comparison.</p>\r\n     *\r\n     * @function isBefore\r\n     * @memberof apex.date\r\n     * @param {Date} pDate1 A date object\r\n     * @param {Date} pDate2 A date object\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {boolean} is the date before\r\n     *\r\n     * @example <caption>Returns if a date object is before another.</caption>\r\n     *\r\n     * var isDateBefore = apex.date.isBefore( myDate1, myDate2, apex.date.UNIT.SECOND );\r\n     */\r\n    date.isBefore = function (pDate1, pDate2, pUnit) {\r\n        var bool = false,\r\n            unit = pUnit || date.UNIT.MILLISECOND,\r\n            localDate1 = prepareCompareDate(pDate1, unit),\r\n            localDate2 = prepareCompareDate(pDate2, unit);\r\n\r\n        if (unit === date.UNIT.MILLISECOND) {\r\n            bool = localDate1.getTime() < localDate2.getTime();\r\n        } else {\r\n            bool = localDate1 < date.add(date.subtract(localDate2, 1, unit), 1, date.UNIT.MILLISECOND);\r\n        }\r\n\r\n        return bool;\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if the first date object is after the second date.\r\n     * <em>pUnit</em> controls the precision of the comparison.</p>\r\n     *\r\n     * @function isAfter\r\n     * @memberof apex.date\r\n     * @param {Date} pDate1 A date object\r\n     * @param {Date} pDate2 A date object\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {boolean} is the date after\r\n     *\r\n     * @example <caption>Returns if a date object is before another.</caption>\r\n     *\r\n     * var isDateAfter = apex.date.isAfter( myDate1, myDate2, apex.date.UNIT.SECOND );\r\n     */\r\n    date.isAfter = function (pDate1, pDate2, pUnit) {\r\n        var bool = false,\r\n            unit = pUnit || date.UNIT.MILLISECOND,\r\n            localDate1 = prepareCompareDate(pDate1, unit),\r\n            localDate2 = prepareCompareDate(pDate2, unit);\r\n\r\n        if (unit === date.UNIT.MILLISECOND) {\r\n            bool = localDate1.getTime() > localDate2.getTime();\r\n        } else {\r\n            bool = localDate1 > date.subtract(date.add(localDate2, 1, unit), 1, date.UNIT.MILLISECOND);\r\n        }\r\n\r\n        return bool;\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if the first date object is the same as the second date.\r\n     * <em>pUnit</em> controls the precision of the comparison.</p>\r\n     *\r\n     * @function isSame\r\n     * @memberof apex.date\r\n     * @param {Date} pDate1 A date object\r\n     * @param {Date} pDate2 A date object\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {boolean} is the date same\r\n     *\r\n     * @example <caption>Returns if a date object is the same as another.</caption>\r\n     *\r\n     * var isDateSame = apex.date.isSame( myDate1, myDate2, apex.date.UNIT.SECOND );\r\n     */\r\n    date.isSame = function (pDate1, pDate2, pUnit) {\r\n        var bool = false,\r\n            unit = pUnit || date.UNIT.MILLISECOND,\r\n            localDate1 = prepareCompareDate(pDate1, unit),\r\n            localDate2 = prepareCompareDate(pDate2, unit);\r\n\r\n        bool = localDate1.getTime() === localDate2.getTime();\r\n\r\n        return bool;\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if the first date object is the same or before the second date.\r\n     * <em>pUnit</em> controls the precision of the comparison.</p>\r\n     *\r\n     * @function isSameOrBefore\r\n     * @memberof apex.date\r\n     * @param {Date} pDate1 A date object\r\n     * @param {Date} pDate2 A date object\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {boolean} is the date same/before\r\n     *\r\n     * @example <caption>Returns if a date object is the same or before another.</caption>\r\n     *\r\n     * var isDateSameBefore = apex.date.isSameOrBefore( myDate1, myDate2, apex.date.UNIT.SECOND );\r\n     */\r\n    date.isSameOrBefore = function (pDate1, pDate2, pUnit) {\r\n        var bool = false,\r\n            unit = pUnit || date.UNIT.MILLISECOND,\r\n            localDate1 = prepareCompareDate(pDate1, unit),\r\n            localDate2 = prepareCompareDate(pDate2, unit);\r\n\r\n        if (unit === date.UNIT.MILLISECOND) {\r\n            bool = localDate1.getTime() <= localDate2.getTime();\r\n        } else {\r\n            bool = date.isSame(localDate1, localDate2) || localDate1 < date.add(date.subtract(localDate2, 1, unit), 1, date.UNIT.MILLISECOND);\r\n        }\r\n\r\n        return bool;\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if the first date object is the same or after the second date.\r\n     * <em>pUnit</em> controls the precision of the comparison.</p>\r\n     *\r\n     * @function isSameOrAfter\r\n     * @memberof apex.date\r\n     * @param {Date} pDate1 A date object\r\n     * @param {Date} pDate2 A date object\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {boolean} is the date same/after\r\n     *\r\n     * @example <caption>Returns if a date object is the same or after another.</caption>\r\n     *\r\n     * var isDateSameAfter = apex.date.isSameOrAfter( myDate1, myDate2, apex.date.UNIT.SECOND );\r\n     */\r\n    date.isSameOrAfter = function (pDate1, pDate2, pUnit) {\r\n        var bool = false,\r\n            unit = pUnit || date.UNIT.MILLISECOND,\r\n            localDate1 = prepareCompareDate(pDate1, unit),\r\n            localDate2 = prepareCompareDate(pDate2, unit);\r\n\r\n        if (unit === date.UNIT.MILLISECOND) {\r\n            bool = localDate1.getTime() >= localDate2.getTime();\r\n        } else {\r\n            bool = date.isSame(localDate1, localDate2) || localDate1 > date.subtract(date.add(localDate2, 1, unit), 1, date.UNIT.MILLISECOND);\r\n        }\r\n\r\n        return bool;\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if the first date object is between the second date and the third date.\r\n     * <em>pUnit</em> controls the precision of the comparison.</p>\r\n     *\r\n     * @function isBetween\r\n     * @memberof apex.date\r\n     * @param {Date} pDate1 A date object\r\n     * @param {Date} pDate2 A date object\r\n     * @param {Date} pDate3 A date object\r\n     * @param {string} [pUnit=apex.date.UNIT.MILLISECOND] The unit to use - apex.date.UNIT constant\r\n     * @return {boolean} is the date between\r\n     *\r\n     * @example <caption>Returns if a date object is between 2 another.</caption>\r\n     *\r\n     * var isDateBetween = apex.date.isBetween( myDate1, myDate2, myDate3, apex.date.UNIT.SECOND );\r\n     */\r\n    date.isBetween = function (pDate1, pDate2, pDate3, pUnit) {\r\n        var bool = false,\r\n            unit = pUnit || date.UNIT.MILLISECOND,\r\n            localDate1 = prepareCompareDate(pDate1, unit),\r\n            localDate2 = prepareCompareDate(pDate2, unit),\r\n            localDate3 = prepareCompareDate(pDate3, unit);\r\n\r\n        bool = localDate1 > localDate2 && localDate1 < localDate3;\r\n\r\n        return bool;\r\n    };\r\n\r\n    /**\r\n     * <p>Return true if a given date object is within a leap year.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function isLeapYear\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {boolean} is a leap year\r\n     *\r\n     * @example <caption>Returns if it's a leap year for a given date.</caption>\r\n     *\r\n     * var isLeapYear = apex.date.isLeapYear( myDate );\r\n     */\r\n    date.isLeapYear = function (pDate) {\r\n        var localDate = pDate || new Date();\r\n\r\n        return new Date(localDate.getFullYear(), 1, 29).getDate() === 29;\r\n    };\r\n\r\n    /**\r\n     * <p>Return the ISO format string (ISO 8601) without timezone information of a given date object.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     *\r\n     * @function toISOString\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @return {string} The formatted date string\r\n     *\r\n     * @example <caption>Returns date as ISO format string.</caption>\r\n     *\r\n     * var isoFormat = apex.date.toISOString( myDate );\r\n     * // output: \"2021-06-15:50:10\"\r\n     */\r\n    date.toISOString = function (pDate) {\r\n        var localDate = date.clone(pDate || new Date());\r\n\r\n        date.add(localDate, localDate.getTimezoneOffset() * -1, date.UNIT.MINUTE);\r\n\r\n        return localDate.toISOString().split(\".\")[0];\r\n    };\r\n\r\n    /**\r\n     * <p>Return the relative date in words of a given date object\r\n     * This is the client side counterpart of the PL/SQL function <em>APEX_UTIL.GET_SINCE</em>.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.</p>\r\n     * @function since\r\n     * @memberof apex.date\r\n     * @param {string} [pDate=new Date()] A date object\r\n     * @param {boolean} [pShort=false] Whether to return a short version of relative date\r\n     * @return {string} The formatted date string\r\n     *\r\n     * @example <caption>Returns the relative date in words.</caption>\r\n     *\r\n     * var sinceString = apex.date.since( myDate );\r\n     * // output: \"2 days from now\" or \"30 minutes ago\"\r\n     *\r\n     * var sinceString = apex.date.since( myDate, true );\r\n     * // output: \"In 1.1y\" or \"30m\"\r\n     */\r\n    date.since = function (pDate, pShort) {\r\n        pShort = pShort === undefined ? false : pShort ;\r\n        var localDate = pDate || new Date(),\r\n            now = new Date(),\r\n            nowDateDifference = (now - localDate) / 1000,\r\n            dateNowDifference = (localDate - now) / 1000,\r\n            short = pShort,\r\n            sinceText = \"\",\r\n            formatMessage = lang.formatMessage,\r\n            messages = {\r\n                secondsAgo: short ? formatMessage(\"APEX.SINCE.SHORT.SECONDS_AGO\", \"#time#\") : formatMessage(\"SINCE_SECONDS_AGO\", \"#time#\"),\r\n                minutesAgo: short ? formatMessage(\"APEX.SINCE.SHORT.MINUTES_AGO\", \"#time#\") : formatMessage(\"SINCE_MINUTES_AGO\", \"#time#\"),\r\n                hoursAgo: short ? formatMessage(\"APEX.SINCE.SHORT.HOURS_AGO\", \"#time#\") : formatMessage(\"SINCE_HOURS_AGO\", \"#time#\"),\r\n                daysAgo: short ? formatMessage(\"APEX.SINCE.SHORT.DAYS_AGO\", \"#time#\") : formatMessage(\"SINCE_DAYS_AGO\", \"#time#\"),\r\n                weeksAgo: short ? formatMessage(\"APEX.SINCE.SHORT.WEEKS_AGO\", \"#time#\") : formatMessage(\"SINCE_WEEKS_AGO\", \"#time#\"),\r\n                monthsAgo: short ? formatMessage(\"APEX.SINCE.SHORT.MONTHS_AGO\", \"#time#\") : formatMessage(\"SINCE_MONTHS_AGO\", \"#time#\"),\r\n                yearsAgo: short ? formatMessage(\"APEX.SINCE.SHORT.YEARS_AGO\", \"#time#\") : formatMessage(\"SINCE_YEARS_AGO\", \"#time#\"),\r\n                secondsFromNow: short ? formatMessage(\"APEX.SINCE.SHORT.SECONDS_FROM_NOW\", \"#time#\") : formatMessage(\"SINCE_SECONDS_FROM_NOW\", \"#time#\"),\r\n                minutesFromNow: short ? formatMessage(\"APEX.SINCE.SHORT.MINUTES_FROM_NOW\", \"#time#\") : formatMessage(\"SINCE_MINUTES_FROM_NOW\", \"#time#\"),\r\n                hoursFromNow: short ? formatMessage(\"APEX.SINCE.SHORT.HOURS_FROM_NOW\", \"#time#\") : formatMessage(\"SINCE_HOURS_FROM_NOW\", \"#time#\"),\r\n                daysFromNow: short ? formatMessage(\"APEX.SINCE.SHORT.DAYS_FROM_NOW\", \"#time#\") : formatMessage(\"SINCE_DAYS_FROM_NOW\", \"#time#\"),\r\n                weeksFromNow: short ? formatMessage(\"APEX.SINCE.SHORT.WEEKS_FROM_NOW\", \"#time#\") : formatMessage(\"SINCE_WEEKS_FROM_NOW\", \"#time#\"),\r\n                monthsFromNow: short ? formatMessage(\"APEX.SINCE.SHORT.MONTHS_FROM_NOW\", \"#time#\") : formatMessage(\"SINCE_MONTHS_FROM_NOW\", \"#time#\"),\r\n                yearsFromNow: short ? formatMessage(\"APEX.SINCE.SHORT.YEARS_FROM_NOW\", \"#time#\") : formatMessage(\"SINCE_YEARS_FROM_NOW\", \"#time#\"),\r\n                now: formatMessage(\"SINCE_NOW\")\r\n            };\r\n\r\n        // if a not valid date object is supplied, throw an error\r\n        if (!date.isValid(localDate)) {\r\n            throw new Error(\"Not a valid date\");\r\n        }\r\n\r\n        // build since text for now, seconds, minutes, hours, days, months & years\r\n        if (date.isSame(now, localDate, date.UNIT.SECOND)) {\r\n            sinceText = messages.now;\r\n        } else if (nowDateDifference > 0 && nowDateDifference < 60) {\r\n            sinceText = messages.secondsAgo.replace(\"#time#\", Math.round(nowDateDifference));\r\n        } else if (dateNowDifference > 0 && dateNowDifference < 60) {\r\n            sinceText = messages.secondsFromNow.replace(\"#time#\", Math.round(dateNowDifference));\r\n        } else if (nowDateDifference >= 60 && nowDateDifference < 60 * 60) {\r\n            sinceText = messages.minutesAgo.replace(\"#time#\", Math.round(nowDateDifference / 60));\r\n        } else if (dateNowDifference >= 60 && dateNowDifference < 60 * 60) {\r\n            sinceText = messages.minutesFromNow.replace(\"#time#\", Math.round(dateNowDifference / 60));\r\n        } else if (nowDateDifference >= 60 * 60 && nowDateDifference < 60 * 60 * 24 * 2) {\r\n            sinceText = messages.hoursAgo.replace(\"#time#\", Math.round(nowDateDifference / 60 / 60));\r\n        } else if (dateNowDifference >= 60 * 60 && dateNowDifference < 60 * 60 * 24 * 2) {\r\n            sinceText = messages.hoursFromNow.replace(\"#time#\", Math.round(dateNowDifference / 60 / 60));\r\n        } else if (nowDateDifference >= 60 * 60 * 24 * 2 && nowDateDifference < 60 * 60 * 24 * 14) {\r\n            sinceText = messages.daysAgo.replace(\"#time#\", Math.round(nowDateDifference / 60 / 60 / 24));\r\n        } else if (dateNowDifference >= 60 * 60 * 24 * 2 && dateNowDifference < 60 * 60 * 24 * 14) {\r\n            sinceText = messages.daysFromNow.replace(\"#time#\", Math.round(dateNowDifference / 60 / 60 / 24));\r\n        } else if (nowDateDifference >= 60 * 60 * 24 * 14 && nowDateDifference < 60 * 60 * 24 * 60) {\r\n            sinceText = messages.weeksAgo.replace(\"#time#\", Math.round(nowDateDifference / 60 / 60 / 24 / 7));\r\n        } else if (dateNowDifference >= 60 * 60 * 24 * 14 && dateNowDifference < 60 * 60 * 24 * 60) {\r\n            sinceText = messages.weeksFromNow.replace(\"#time#\", Math.round(dateNowDifference / 60 / 60 / 24 / 7));\r\n        } else if (nowDateDifference >= 60 * 60 * 24 * 60 && nowDateDifference < 60 * 60 * 24 * 365) {\r\n            sinceText = messages.monthsAgo.replace(\"#time#\", Math.round(date.monthsBetween(localDate, now)));\r\n        } else if (dateNowDifference >= 60 * 60 * 24 * 60 && dateNowDifference < 60 * 60 * 24 * 365) {\r\n            sinceText = messages.monthsFromNow.replace(\"#time#\", Math.round(date.monthsBetween(now, localDate)));\r\n        } else if (nowDateDifference >= 60 * 60 * 24 * 365) {\r\n            sinceText = messages.yearsAgo.replace(\"#time#\", (date.monthsBetween(localDate, now) / 12).toFixed(1));\r\n        } else if (dateNowDifference >= 60 * 60 * 24 * 365) {\r\n            sinceText = messages.yearsFromNow.replace(\"#time#\", (date.monthsBetween(now, localDate) / 12).toFixed(1));\r\n        }\r\n\r\n        return sinceText;\r\n    };\r\n\r\n    /**\r\n     * <p>Return the formatted string of a date with a given (Oracle compatible) format mask.\r\n     * If <em>pDate</em> is not provided it uses the current date & time.\r\n     * It uses the default date format mask & locale defined in the application globalization settings.</p>\r\n     *\r\n     * <p>Currently not supported Oracle specific formats are:\r\n     * SYEAR,SYYYY,IYYY,YEAR,IYY,SCC,TZD,TZH,TZM,TZR,AD,BC,CC,EE,FF,FX,IY,RM,TS,E,I,J,Q,X\"</p>\r\n     *\r\n     * @function format\r\n     * @memberof apex.date\r\n     * @param {Date} [pDate=new Date()] A date object\r\n     * @param {string} [pFormat=apex.date.DEFAULT_DATE_FORMAT] The format mask\r\n     * @param {string} [pLocale=apex.locale.getLanguage()] The locale\r\n     * @return {string} The formatted date string\r\n     *\r\n     * @example <caption>Returns the formatted date string.</caption>\r\n     *\r\n     * var dateString = apex.date.format( myDate, \"YYYY-MM-DD HH24:MI\" );\r\n     * // output: \"2021-06-29 15:30\"\r\n     *\r\n     * var dateString = apex.date.format( myDate, \"Day, DD Month YYYY\" );\r\n     * // output: \"Wednesday, 29 June 2021\"\r\n     *\r\n     * var dateString = apex.date.format( myDate, \"Day, DD Month YYYY\", \"de\" );\r\n     * // output: \"Mittwoch, 29 Juni 2021\"\r\n     */\r\n    date.format = function (pDate, pFormat, pLocale) {\r\n        var localDate = pDate || new Date(),\r\n            locales = pLocale || locale.getLanguage() || \"default\",\r\n            formatMask = pFormat || date.DEFAULT_DATE_FORMAT,\r\n            formatMaskSearch = formatMask.toUpperCase(),\r\n            formatTokenString = \"MONTH|SSSSS|HH12|HH24|RRRR|YYYY|DAY|DDD|MON|AM|DD|DL|DS|DY|FM|HH|IW|MI|MM|PM|RR|SS|WW|YY|D|W\",\r\n            notSupportedTokenString = \"SYEAR|SYYYY|IYYY|YEAR|IYY|SCC|TZD|TZH|TZM|TZR|AD|BC|CC|EE|FF|FX|IY|RM|TS|E|I|J|Q|X\",\r\n            formatTokens = [],\r\n            formatToken = \"\",\r\n            notSupportedTokens = [],\r\n            notSupportedToken = \"\",\r\n            formatMaskPart,\r\n            findings = [],\r\n            finding,\r\n            formattedString,\r\n            i;\r\n\r\n        function _isSubstringEnquoted(pString, pSubstring) {\r\n            var string = pString.toUpperCase(),\r\n                subString = pSubstring.toUpperCase(),\r\n                subStringIndex = string.indexOf(subString);\r\n\r\n            return string.substr(0, subStringIndex).includes('\"') && string.substr(subStringIndex + 1, string.length).includes('\"');\r\n        }\r\n\r\n        function _isUpperCase(pString ) {\r\n            pString = pString === undefined ? \"\" : pString;\r\n            return pString === pString.toUpperCase();\r\n        }\r\n\r\n        function _isLowerCase(pString ) {\r\n            pString = pString === undefined ? \"\" : pString;\r\n            return pString === pString.toLowerCase();\r\n        }\r\n\r\n        function _isInitCase(pString ) {\r\n            pString = pString === undefined ? \"\" : pString;\r\n            return pString.charAt(0) === pString.charAt(0).toUpperCase() && pString.substr(1) === pString.substr(1).toLowerCase();\r\n        }\r\n\r\n        function _toInitCase(pString ) {\r\n            pString = pString === undefined ? \"\" : pString;\r\n            return pString.charAt(0).toUpperCase() + pString.substr(1).toLowerCase();\r\n        }\r\n\r\n        function _getDatePart(pDate, pPartFormat) {\r\n            var datePart = {\r\n                YYYY: function (d) {\r\n                    return d.getFullYear();\r\n                },\r\n                YY: function (d) {\r\n                    return d.getFullYear().toString().substr(2, 4);\r\n                },\r\n                RRRR: function (d) {\r\n                    return d.getFullYear();\r\n                },\r\n                RR: function (d) {\r\n                    return d.getFullYear().toString().substr(2, 4);\r\n                },\r\n                MONTH: function (d) {\r\n                    return d.toLocaleString(locales, { month: \"long\" }).toUpperCase();\r\n                },\r\n                MON: function (d) {\r\n                    return d.toLocaleString(locales, { month: \"short\" }).toUpperCase();\r\n                },\r\n                MM: function (d) {\r\n                    return (\"0\" + (d.getMonth() + 1)).slice(-2);\r\n                },\r\n                IW: function (d) {\r\n                    return (\"0\" + date.ISOWeek(d)).slice(-2);\r\n                },\r\n                WW: function (d) {\r\n                    return (\"0\" + date.ISOWeek(d)).slice(-2);\r\n                },\r\n                W: function (d) {\r\n                    return date.weekOfMonth(d);\r\n                },\r\n                DAY: function (d) {\r\n                    return d.toLocaleString(locales, { weekday: \"long\" }).toUpperCase();\r\n                },\r\n                DDD: function (d) {\r\n                    return (\"0\" + date.dayOfYear(d)).slice(-3);\r\n                },\r\n                DD: function (d) {\r\n                    return (\"0\" + d.toLocaleString(\"default\", { day: \"numeric\" })).slice(-2);\r\n                },\r\n                DY: function (d) {\r\n                    return d.toLocaleString(locales, { weekday: \"short\" }).toUpperCase();\r\n                },\r\n                DL: function (d) {\r\n                    return d.toLocaleString(locales, { weekday: \"long\", day: \"2-digit\", month: \"long\", year: \"numeric\" });\r\n                },\r\n                DS: function (d) {\r\n                    return d.toLocaleString(locales, { day: \"2-digit\", month: \"2-digit\", year: \"numeric\" });\r\n                },\r\n                D: function (d) {\r\n                    return d.getDay() + 1;\r\n                },\r\n                HH24: function (d) {\r\n                    return d.toLocaleString(locales, { hour: \"2-digit\", hour12: false }).substr(0, 2);\r\n                },\r\n                HH12: function (d) {\r\n                    return d.toLocaleString(locales, { hour: \"2-digit\", hour12: true }).substr(0, 2);\r\n                },\r\n                HH: function (d) {\r\n                    return d.toLocaleString(locales, { hour: \"2-digit\", hour12: true }).substr(0, 2);\r\n                },\r\n                AM: function (d) {\r\n                    return d.toLocaleString(\"default\", { hour: \"2-digit\", hour12: true }).substr(3, 2);\r\n                },\r\n                PM: function (d) {\r\n                    return d.toLocaleString(\"default\", { hour: \"2-digit\", hour12: true }).substr(3, 2);\r\n                },\r\n                MI: function (d) {\r\n                    return (\"0\" + d.toLocaleString(\"default\", { minute: \"numeric\" })).slice(-2);\r\n                },\r\n                SSSSS: function (d) {\r\n                    return date.secondsPastMidnight(d);\r\n                },\r\n                SS: function (d) {\r\n                    return (\"0\" + d.toLocaleString(\"default\", { second: \"numeric\" })).slice(-2);\r\n                }\r\n            };\r\n\r\n            return datePart[pPartFormat](pDate);\r\n        }\r\n\r\n        // if a not valid date object is supplied, throw an error\r\n        if (!date.isValid(localDate)) {\r\n            throw new Error(\"Not a valid date\");\r\n        }\r\n\r\n        // special handling of SINCE format mask\r\n        if (formatMaskSearch === \"SINCE\") {\r\n            return date.since(localDate);\r\n        }\r\n\r\n        // find token matches in supplied format mask which we can use to translate into date parts\r\n        formatTokens = formatTokenString.split(\"|\");\r\n\r\n        for (i = 0; i < formatTokens.length; i++) {\r\n            formatToken = formatTokens[i];\r\n\r\n            // check for format mask tokens, but not the ones within quotes\r\n            if (formatMaskSearch.includes(formatToken)) {\r\n                if (!_isSubstringEnquoted(formatMask, formatToken)) {\r\n                    findings.push({\r\n                        id: i,\r\n                        name: formatToken,\r\n                        textCase:\r\n                            formatToken === \"DS\" || formatToken === \"DL\"\r\n                                ? \"original\"\r\n                                : _isUpperCase(formatMask.substr(formatMask.toUpperCase().indexOf(formatToken), formatToken.length))\r\n                                    ? \"upper\"\r\n                                    : _isLowerCase(formatMask.substr(formatMask.toUpperCase().indexOf(formatToken), formatToken.length))\r\n                                        ? \"lower\"\r\n                                        : _isInitCase(formatMask.substr(formatMask.toUpperCase().indexOf(formatToken), formatToken.length))\r\n                                            ? \"init\"\r\n                                            : \"upper\"\r\n                    });\r\n                    formatMask = formatMask.replace(new RegExp(formatToken, \"ig\"), \"~~\" + i + \"~~\");\r\n                }\r\n                formatMaskSearch = formatMaskSearch.replace(new RegExp(formatToken, \"g\"), \"\");\r\n            }\r\n        }\r\n\r\n        // lookup not yet supported tokens in remaining format mask, if found and not within quotes throw an error\r\n        notSupportedTokens = notSupportedTokenString.split(\"|\");\r\n\r\n        for (i = 0; i < notSupportedTokens.length; i++) {\r\n            notSupportedToken = notSupportedTokens[i];\r\n\r\n            if (formatMaskSearch.includes(notSupportedToken) && !_isSubstringEnquoted(formatMaskSearch, notSupportedToken)) {\r\n                throw new Error(\"Format not supported: \" + notSupportedToken);\r\n            }\r\n        }\r\n\r\n        // now we are building the final formatted output from our findings\r\n        formattedString = formatMask;\r\n\r\n        for (i = 0; i < findings.length; i++) {\r\n            finding = findings[i];\r\n\r\n            formatMaskPart = _getDatePart(localDate, finding.name).toString();\r\n\r\n            switch (finding.textCase) {\r\n                case \"upper\":\r\n                    formatMaskPart = formatMaskPart.toUpperCase();\r\n                    break;\r\n                case \"lower\":\r\n                    formatMaskPart = formatMaskPart.toLowerCase();\r\n                    break;\r\n                case \"init\":\r\n                    formatMaskPart = _toInitCase(formatMaskPart);\r\n                    break;\r\n            }\r\n\r\n            formattedString = formattedString.replace(new RegExp(\"~~\" + finding.id + \"~~\", \"g\"), formatMaskPart);\r\n        }\r\n\r\n        // remove quotes special escaped parts, like \"T\" in YYYY-MM-DD\"T\"HH:MM:SS\r\n        if (formattedString.includes('\"')) {\r\n            formattedString = formattedString.replace(new RegExp('\"', \"g\"), \"\");\r\n        }\r\n\r\n        return formattedString;\r\n    };\r\n\r\n    /**\r\n     * <p>Return the parsed date object of a given date string and a (Oracle compatible) format mask.\r\n     * It uses the default date format mask defined in the application globalization settings.</p>\r\n     *\r\n     * <p>Currently not supported Oracle specific formats are:\r\n     * MONTH,SSSSS,SYEAR,SYYYY,IYYY,YEAR,DAY,IYY,SCC,TZD,TZH,TZM,TZR,AD,BC,CC,DL,DS,DY,EE,FF,FX,IW,IY,RM,TS,WW,E,I,J,Q,W,X</p>\r\n     *\r\n     * @function parse\r\n     * @memberof apex.date\r\n     * @param {string} pDateString A formatted date string\r\n     * @param {string} [pFormat=apex.date.DEFAULT_DATE_FORMAT] The format mask\r\n     * @return {Date} The date object\r\n     *\r\n     * @example <caption>Returns the parsed date object.</caption>\r\n     *\r\n     * var date = apex.date.parse( \"2021-06-29 15:30\", \"YYYY-MM-DD HH24:MI\" );\r\n     * var date = apex.date.parse( \"2021-JUN-29 08:30 am\", \"YYYY-MON-DD HH12:MI AM\" );\r\n     */\r\n    date.parse = function (pDateString, pFormat) {\r\n        var localDate = new Date(),\r\n            dateString = pDateString || \"\",\r\n            formatMask = pFormat || date.DEFAULT_DATE_FORMAT,\r\n            formatMaskSearch = formatMask.toUpperCase(),\r\n            formatTokenString = \"HH12|HH24|RRRR|YYYY|DDD|MON|AM|DD|FM|HH|MI|MM|PM|RR|SS|YY|D\",\r\n            notSupportedTokenString = \"MONTH|SSSSS|SYEAR|SYYYY|IYYY|YEAR|DAY|IYY|SCC|TZD|TZH|TZM|TZR|AD|BC|CC|DL|DS|DY|EE|FF|FX|IW|IY|RM|TS|WW|E|I|J|Q|W|X\",\r\n            formatTokens = [],\r\n            formatToken = \"\",\r\n            notSupportedTokens = [],\r\n            notSupportedToken = \"\",\r\n            findings = [],\r\n            finding,\r\n            dateStringPart,\r\n            correctFollowFindings = false,\r\n            findingStart = 0,\r\n            findingEnd = 0,\r\n            correctStartIndex = 0,\r\n            i;\r\n\r\n        function _getMonthNumber(pMonth) {\r\n            return new Date(Date.parse(pMonth + \" 1, 2021\")).getMonth() + 1;\r\n        }\r\n\r\n        function _setDayOfWeek(pDate, pDay) {\r\n            var currentDay = pDate.getDay() + 1,\r\n                distance = pDay - currentDay;\r\n            pDate.setDate(pDate.getDate() + distance);\r\n        }\r\n\r\n        function _setDatePart(pDate, pPartValue, pPartFormat) {\r\n            var setDatePart = {\r\n                YYYY: function (d, v) {\r\n                    d.setFullYear(v);\r\n                },\r\n                YY: function (d, v) {\r\n                    d.setFullYear(d.getFullYear().toString().substr(0, 2) + v);\r\n                },\r\n                RRRR: function (d, v) {\r\n                    d.setFullYear(v);\r\n                },\r\n                RR: function (d, v) {\r\n                    d.setFullYear(d.getFullYear().toString().substr(0, 2) + v);\r\n                },\r\n                MON: function (d, v) {\r\n                    d.setMonth(_getMonthNumber(v) - 1);\r\n                },\r\n                MM: function (d, v) {\r\n                    d.setMonth(parseInt(v, 10) - 1);\r\n                },\r\n                DDD: function (d, v) {\r\n                    date.setDayOfYear(d, parseInt(v, 10));\r\n                },\r\n                DD: function (d, v) {\r\n                    d.setDate(parseInt(v, 10));\r\n                },\r\n                D: function (d, v) {\r\n                    _setDayOfWeek(d, parseInt(v, 10));\r\n                },\r\n                HH24: function (d, v) {\r\n                    d.setHours(parseInt(v, 10));\r\n                },\r\n                HH12: function (d, v) {\r\n                    d.setHours(parseInt(v, 10));\r\n                },\r\n                HH: function (d, v) {\r\n                    d.setHours(parseInt(v, 10));\r\n                },\r\n                AM: function (d, v) {\r\n                    if (v.toUpperCase() === \"AM\" && d.getHours() > 12) {\r\n                        d.setHours(d.getHours() - 12);\r\n                    } else if (v.toUpperCase() === \"PM\" && d.getHours() < 12) {\r\n                        d.setHours(d.getHours() + 12);\r\n                    }\r\n                },\r\n                PM: function (d, v) {\r\n                    if (v.toUpperCase() === \"AM\" && d.getHours() > 12) {\r\n                        d.setHours(d.getHours() - 12);\r\n                    } else if (v.toUpperCase() === \"PM\" && d.getHours() < 12) {\r\n                        d.setHours(d.getHours() + 12);\r\n                    }\r\n                },\r\n                MI: function (d, v) {\r\n                    d.setMinutes(parseInt(v, 10));\r\n                },\r\n                SS: function (d, v) {\r\n                    d.setSeconds(parseInt(v, 10));\r\n                }\r\n            };\r\n\r\n            setDatePart[pPartFormat](pDate, pPartValue);\r\n        }\r\n\r\n        // exit when no date string is provided\r\n        if (!dateString) {\r\n            return;\r\n        }\r\n\r\n        // reset hour, minutes, seconds, milliseconds\r\n        localDate.setHours(0, 0, 0, 0);\r\n\r\n        // first check if string is already parsable as a date, only when no format mask is supplied\r\n        if (!pFormat && date.isValidString(dateString)) {\r\n            localDate = new Date(dateString);\r\n            // now we have to parse it by our own\r\n        } else {\r\n            // find token matches in supplied format mask which we can use to translate into date parts\r\n            formatTokens = formatTokenString.split(\"|\");\r\n\r\n            for (i = 0; i < formatTokens.length; i++) {\r\n                formatToken = formatTokens[i];\r\n\r\n                if (formatMaskSearch.includes(formatToken)) {\r\n                    findingStart = formatMask.toUpperCase().indexOf(formatToken);\r\n                    findingEnd = formatMask.toUpperCase().indexOf(formatToken) + formatToken.length;\r\n\r\n                    // correct start & end position if a format mask part could be longer than the real data, e.g. HH24 --> 13\r\n                    if (formatToken === \"HH24\" || formatToken === \"HH12\") {\r\n                        findingEnd = findingEnd - 2;\r\n                        correctStartIndex = findingStart;\r\n                        correctFollowFindings = true;\r\n                    }\r\n\r\n                    findings.push({\r\n                        id: i,\r\n                        name: formatToken,\r\n                        start: findingStart,\r\n                        end: findingEnd\r\n                    });\r\n\r\n                    formatMaskSearch = formatMaskSearch.replace(formatToken, new Array(formatToken.length + 1).join(i));\r\n                }\r\n            }\r\n\r\n            // correct start & end position of following findings, if e.g. HH24 or HH12 was used\r\n            if (correctFollowFindings) {\r\n                findings\r\n                    .filter(function (elem) {\r\n                        return elem.start > correctStartIndex;\r\n                    })\r\n                    .forEach(function (item) {\r\n                        item.start = item.start - 2;\r\n                        item.end = item.end - 2;\r\n                    });\r\n            }\r\n\r\n            // lookup not yet supported tokens in remaining format mask, if found thow an error\r\n            notSupportedTokens = notSupportedTokenString.split(\"|\");\r\n\r\n            for (i = 0; i < notSupportedTokens.length; i++) {\r\n                notSupportedToken = notSupportedTokens[i];\r\n\r\n                if (formatMaskSearch.includes(notSupportedToken)) {\r\n                    throw new Error(\"Format not supported: \" + notSupportedToken);\r\n                }\r\n            }\r\n\r\n            // now we are building the final formatted output from our findings\r\n            for (i = 0; i < findings.length; i++) {\r\n                finding = findings[i];\r\n\r\n                dateStringPart = dateString.substring(finding.start, finding.end);\r\n\r\n                _setDatePart(localDate, dateStringPart, finding.name);\r\n            }\r\n        }\r\n\r\n        // if a not valid date object is generated, throw an error\r\n        if (!date.isValid(localDate)) {\r\n            throw new Error(\"Date Parsing Error\");\r\n        }\r\n\r\n        return localDate;\r\n    };\r\n\r\n    //\r\n    // Wrappers for functions from other namespaces, which could be date related\r\n    // Just for convenience, already documented\r\n    //\r\n\r\n    date.getAbbrevMonthNames = function () {\r\n        return locale.getAbbrevMonthNames();\r\n    };\r\n\r\n    date.getAbbrevDayNames = function () {\r\n        return locale.getAbbrevDayNames();\r\n    };\r\n})(apex.date, apex.locale, apex.lang);\r\n","/* global apex */\r\n/* global CKEDITOR */\r\n\r\n//UNE MODIF POUR COMMIT 3\r\nvar shq = shq || {};\r\nshq.cke = {};\r\n\r\n(function (cke, shq, ut, $) {\r\n    //#region CONSTANTES\r\n    /* NON SUPPORTER SUR ES6\r\n    const UNDEFINED = \"undefined\";\r\n    const EXTRA_PLUGINS_STR = [\"mentions\",\"textwatcher\",\"autocomplete\"];\r\n    const WIDGET_NAME = \"AutoCompleteWidget\";\r\n    const AUTO_COMPLETE_PLUG_IN_NAME = \"autocomplete\";\r\n    const AUTO_COMPLETE_CO_BINDING_TAG = \"TestCodeName\";\r\n    const TEST_CODE = \"TestCo\"; // TODO:  enlever quand apex prendra plus cette constante la pour parametre, mais plutot le value du champs CO (la il est null à l'init) \r\n    */\r\n    //#endregion\r\n    //#region Related Functions\r\n    //Obligatoirement lancé dans le bloc d'initialisation de la COMPOSANTE CKEDITOR avant de pouvoir instancié le widgets avec \"createAutoCompleteWidgets\".\r\n\r\n    cke.UNDEFINED = \"undefined\";\r\n    cke.EXTRA_PLUGINS_STR = [\"mentions\",\"textwatcher\",\"autocomplete\"];\r\n    cke.WIDGET_NAME = \"shq_widgets.AutoCompleteWidget\"; //TODO: ENLEVER le widget à la fin et aller changer les string des appèles dans apex\r\n    cke.AUTO_COMPLETE_TAG = \"autocomplete\";\r\n    cke.TEST_CODE = \"TestCo\";\r\n    \r\n    //Obligatoirement lancé de le bloc d'initialisation des CKE pour les préparer à l'initialisation.\r\n    cke.initAutoCompletePlugInCKE = function(editorOptions,autoCompCodeNoSeq)\r\n    {\r\n        for(var i in cke.EXTRA_PLUGINS_STR)\r\n        {\r\n            editorOptions.extraPlugins += \",\"+ cke.EXTRA_PLUGINS_STR[i];\r\n        }\r\n        $(\"#\"+editorOptions.itemName).data(cke.AUTO_COMPLETE_TAG,autoCompCodeNoSeq);\r\n    };\r\n    //Obligatoirement lancé dans le bloc d'initialisation de la PAGE pour instancié les widget.\r\n    cke.createAutoCompleteWidgets = function(ckeGetDataProcessName)\r\n    {\r\n        function scopeFunction(){\r\n            var asyncInstance = editors[instance];\r\n            asyncInstance.on(\"instanceReady\",function(evt){initFn(evt,asyncInstance);});\r\n        }\r\n\r\n        if (typeof(CKEDITOR) != cke.UNDEFINED)\r\n        { \r\n            var editors = CKEDITOR.instances;\r\n            for(var instance in editors)\r\n            {\r\n                scopeFunction();\r\n                \r\n            }\r\n        }\r\n\r\n        \r\n        var initFn = function(ckeInst,pAsyncInstance){ //TODO: ya moyen d'utilisé juste la première je pense ici\r\n            //Verifying that we want an auto-complete on this CKEDITOR instance by looking for the JQuery appropriate attribute. . .\r\n            var pluginList = editors[instance].config.extraPlugins.split(\",\");\r\n            console.log(pluginList);\r\n            //if (pluginList.indexOf(cke.AUTO_COMPLETE_TAG) >= 0)\r\n            if (typeof($(\"#\"+instance).data(cke.AUTO_COMPLETE_TAG)) != cke.UNDEFINED)\r\n            {\r\n                //If found, i Create an auto-complete widget. . .\r\n                console.log(\"Contient le tag autocomplete, j'instance un widget\");\r\n                $(\"#\"+ckeInst.editor.name).AutoCompleteWidget({ckeDataProcessName : ckeGetDataProcessName, ckeInst : pAsyncInstance});\r\n            }\r\n            else {\r\n                //ERROR:\r\n                console.log(\"Ne contient pas le tag autocomplete\");\r\n            } \r\n        };\r\n    };\r\n\r\n    //Obligatoirement créer une action dynamic \"OnChange\" sur les CHAMP dont la valeur représente le CODE à utilisé pour filtré les suggestions des autocompletes.\r\n    //Permet de garder à jour le filtre de suggestions.\r\n    cke.updateAutoCompCodeNoSeq = function(newCode){\r\n\r\n        if (typeof(CKEDITOR) != cke.UNDEFINED)\r\n        { \r\n            var editors = CKEDITOR.instances;\r\n            for(var instance in editors)\r\n            {\r\n               if (typeof($(\"#\"+instance).data(cke.AUTO_COMPLETE_TAG)) != cke.UNDEFINED)\r\n                {\r\n                    //If found, i Update the code value. . .\r\n                    console.log(\"Contient le tag autocomplete, je l'update\");\r\n                    var a = $(\"#\"+instance).data(\"shq_widgets-AutoCompleteWidget\");\r\n                    a.setCodeNoSeq(newCode);\r\n                }\r\n                else {\r\n                    //ERROR:\r\n                    console.log(\"Ne contient pas le tag autocomplete\");\r\n                } \r\n            }\r\n        }\r\n    };\r\n    //#endregion\r\n    //#region WIDGET_DEFINITION\r\n    $.widget(cke.WIDGET_NAME, {\r\n        jsonData: cke.UNDEFINED,\r\n        options: {\r\n            ckeInst: cke.UNDEFINED,\r\n            ckeDataProcessName: cke.UNDEFINED,\r\n            textTestCallback: function (range) \r\n            {\r\n                if (!range.collapsed){ return null; }\r\n\r\n                return CKEDITOR.plugins.textMatch.match(range, matchCallback);\r\n                function matchCallback(text, offset) \r\n                {\r\n                    //var pattern = /\\#[A-z]*/gi;\r\n                    var pattern = /(\\#)[A-z]*(?!.*\\1)/i;\r\n                    var match   = text.slice(0, offset).match(pattern);\r\n\r\n                    if (!match){ return null; }\r\n\r\n                    return {\r\n                        start: match.index,\r\n                        end: offset\r\n                    };\r\n                }\r\n            },\r\n            dataCallback: function (matchInfo, callback) \r\n            {\r\n                var query = matchInfo.query.substring( 1 );//matchInfo.query.toLowerCase() //Probablement besoin de faire une propriété privé alimenter par une options au moment du init\r\n                var data = jsonData.jsonParam.filter( \r\n                    function(item) {\r\n                        //var itemName = '[[' + item.NAME + ']]';\r\n                        return item.name.indexOf(query) == 0;\r\n                    }\r\n                );\r\n                callback(data);\r\n            },\r\n            itemTemplate : '<li data-id=\"{id}\">{name}</li>',\r\n            outputTemplate : '#{name}#',//<span>&nbsp;</span>',            \r\n        },\r\n        _init: function () \r\n        {\r\n            // Executed Before _create()\r\n        },\r\n        _create: function () \r\n        {\r\n           // Executed after _init()\r\n            //Preparing the data\r\n           this._getData();\r\n\r\n           var autocomplete = new this.window[0].CKEDITOR.plugins.autocomplete(this.options.ckeInst.widgets.editor, {\r\n            textTestCallback: this.options.textTestCallback,\r\n            dataCallback: this.options.dataCallback,\r\n            itemTemplate: this.options.itemTemplate,\r\n            outputTemplate: this.options.outputTemplate\r\n            });\r\n\r\n            // Override default getHtmlToInsert to enable rich content output.\r\n            autocomplete.getHtmlToInsert = function(item) {\r\n                return this.outputTemplate.output(item);\r\n            };\r\n        },\t\t\r\n        // Fait appel au process apex pour récupérer les donnés dans la base de donnés avec une fonction PL/SQL.\r\n        _getData: function()\r\n        {\r\n            var autoCompleteCo_Val = $(\"#\"+this.options.ckeInst.widgets.editor.name).data(cke.AUTO_COMPLETE_TAG);\r\n            if (typeof(autoCompleteCo_Val) != cke.UNDEFINED)\r\n            {\r\n                console.log(\"Et le data attribute vaux : \" + autoCompleteCo_Val);\r\n                //Appel au process. . .\r\n                var result = apex.server.process( this.options.ckeDataProcessName, { x01 : $(\"#\"+this.element[0].name).data(cke.AUTO_COMPLETE_TAG)} );\r\n                //Réaction conséquente. . .\r\n                result.done( function( data ) { \r\n                    // return le value\r\n                    console.log(\"Le Widget a reussis a fetch du data\");\r\n                    console.log(data);\r\n                    jsonData = data;\r\n                } ).fail(function( jqXHR, textStatus, errorThrown )  { \r\n                    // handle error \r\n                    //ERROR:\r\n                    console.log(\"Le Widget a fail a fetch du data\");\r\n                    console.log(jqXHR);\r\n                    console.log(textStatus);\r\n                    console.log(errorThrown);\r\n                } ).always( function() { \r\n                    // code that needs to run for both success and failure cases \r\n                    console.log(\"au moin on c'est rendue a la requete. . .\");\r\n                } );\r\n            }\r\n            else {\r\n                console.log(\"Le data attribute pour le CO n'est pas la . . .\");\r\n                //ERROR:\r\n            }\r\n        },\r\n        //Permet de changer le Code après l'initialisation!\r\n        setCodeNoSeq: function(newCode)\r\n        {\r\n\t\t\tvar diese = '#';\r\n\t\t\t\r\n            //TODO: AJOUTER UN PARAMETRE QUI CORRESPONDRAIT A L'ITEM DE LA PAGE POUR METTRE A JOUR LA VALEUR DU CODE et ensuite relancer le fetch de data\r\n            $(diese+this.options.ckeInst.widgets.editor.name).data(cke.AUTO_COMPLETE_TAG,newCode);\r\n            this._getData();\r\n        }\r\n    });\r\n    //#endregion\r\n})(shq.cke, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.date = {};\r\n\r\n(function (shqDate, shq, ut, $) {\r\n\r\n    shqDate.UNITE = {\r\n        JOUR: \"JOUR\",\r\n        MINUTE: \"MINUTE\",\r\n        HEURE: \"HEURE\",\r\n        SECONDE: \"SECONDE\"\r\n    };\r\n    /* \r\n     * Fonction qui fait la diffrence entre deux objets dates selon l'unité passé\r\n    */\r\n    shqDate.differenceEntreDeuxDate = function (pDate1, pDate2, unite) {\r\n\r\n        var utc1 = Date.UTC(pDate1.getFullYear(), pDate1.getMonth(), pDate1.getDate());\r\n        var utc2 = Date.UTC(pDate2.getFullYear(), pDate2.getMonth(), pDate2.getDate());\r\n        var diffMs = Math.abs(utc1  - utc2 );\r\n        var differenceEntreDeuxDate;\r\n\r\n        shqDate.UNITE_FORMULE = {\r\n            JOUR: diffMs / (1000 * 60 * 60 * 24),\r\n            HEURE: diffMs / (1000 * 60 * 60) / 24,\r\n            MINUTE: diffMs / (1000 * 60) / 60,\r\n            SECONDE: diffMs / (1000) / 60\r\n        };\r\n\r\n        switch (unite) {\r\n            case shqDate.UNITE.JOUR:\r\n                differenceEntreDeuxDate = Math.floor(shqDate.UNITE_FORMULE.JOUR);\r\n                break;\r\n            case shqDate.UNITE.MINUTE:\r\n                differenceEntreDeuxDate = Math.floor(shqDate.UNITE_FORMULE.MINUTE);\r\n                break;                \r\n            case shqDate.UNITE.SECONDE:\r\n                differenceEntreDeuxDate = Math.floor(shqDate.UNITE_FORMULE.SECONDE);\r\n                break;\r\n            default:\r\n                differenceEntreDeuxDate = Math.floor(shqDate.UNITE_FORMULE.HEURE);\r\n        }\r\n        return differenceEntreDeuxDate;\r\n    };\r\n\r\n})(shq.date, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.datePicker = {};\r\n\r\n(function (shqDatePicker, shq, ut, $) {\r\n    var diese = '#';\r\n    /* \r\n     * Fonction qui affecte la date minimum de la composante jquery datepicker\r\n     * \r\n     * Exemple d'appel\r\n     * \r\n     * shq.datePicker.assignerDateMinimum([\"NomDeMonItemApexJquery\"],apex.item(\"MonItemApexDateValeur\").getValue());\r\n     * \r\n    */\r\n    shqDatePicker.assignerDateMinimum = function (listApexItemName, valeurDate) {\r\n\r\n        $.each(listApexItemName, function (indexInArray, valueOfElement) {\r\n            var $apexItemName = $(valueOfElement.indexOf(diese, 0) === -1 ? diese.concat(valueOfElement) : valueOfElement);\r\n            $apexItemName.datepicker(\"option\", \"minDate\", valeurDate);\r\n            //\r\n            // Permet de remettre le bouton du datepicker comme APEX.\r\n            //  \r\n            $apexItemName.next('button').addClass('a-Button a-Button--calendar');\r\n        });\r\n    };\r\n    /* \r\n     * Fonction qui affecte la date maximum de la composante jquery datepicker\r\n     * Exemple d'appel\r\n     * \r\n     * shq.datePicker.assignerDateMaximum([\"NomDeMonItemApexJquery\"],apex.item(\"MonItemApexDateValeur\").getValue());\r\n     * \r\n    */\r\n    shqDatePicker.assignerDateMaximum = function (listApexItemName, valeurDate) {\r\n\r\n        $.each(listApexItemName, function (indexInArray, valueOfElement) {\r\n            var $apexItemName = $(valueOfElement.indexOf(diese, 0) === -1 ? diese.concat(valueOfElement) : valueOfElement);\r\n            $apexItemName.datepicker(\"option\", \"maxDate\", valeurDate);\r\n            //\r\n            // Permet de remettre le bouton du datepicker comme APEX.\r\n            //  \r\n            $apexItemName.next('button').addClass('a-Button a-Button--calendar');\r\n        });\r\n    };\r\n\r\n})(shq.datePicker, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\n//const { validate } = require(\"json-schema\");\r\n\r\nvar shq = shq || {};\r\nshq.dem = {};\r\n\r\n(function (dem, shq, ut, $) {\r\n\r\n\r\n    dem.assignerItemsIgSelectionne = function (colonneClef, itemApex, data, modelIg) {\r\n\r\n        var i, elements = [];\r\n        var value;\r\n                \r\n        for (i = 0; i < data.selectedRecords.length; i++) {\r\n            value = modelIg.getValue(data.selectedRecords[i], colonneClef);\r\n            if (elements.indexOf(value)) {\r\n                elements.push(value);\r\n            }\r\n        }\r\n\r\n        apex.item(itemApex).setValue(elements.join(':'));\r\n\r\n    };\r\n\r\n    dem.selectionneImportationDesjardins = function (event, data) {\r\n\r\n        var i, elements = [];\r\n        var value;\r\n        var model = data.model;        \r\n        var messageApex = apex.lang.getMessage('SHQ.AVERTISSEMENT.SOURCE_FICHIER.SELECTIONNER');\r\n\r\n        apex.message.clearErrors();\r\n        model.forEach(function(record,index,id){\r\n            model.setValidity(\"valid\",id,'FILENAME');\r\n        });\r\n        \r\n        for (i = 0; i < data.selectedRecords.length; i++) {\r\n            \r\n            value = model.getValue(data.selectedRecords[i], 'NO_SEQ_FICHIER_EXTRN');\r\n            var id = model.getRecordId(data.selectedRecords[i]);\r\n            var valueSourceFichier = model.getValue(data.selectedRecords[i], 'SOURCE_FICHIER');\r\n\r\n            if (valueSourceFichier !== 'SPC2') {\r\n\r\n                var message = apex.lang.formatNoEscape(messageApex,valueSourceFichier);\r\n                model.setValidity( apex.message.TYPE.ERROR, id, 'FILENAME',message );\r\n                apex.message.showErrors([{type:apex.message.TYPE.ERROR,\r\n                                         location:\"page\",\r\n                                         message: message,\r\n                                         unsafe:true}]);\r\n\r\n            } else {\r\n                elements.push(value);\r\n            }\r\n        }\r\n\r\n        apex.item('P21_SELECTED_IG').setValue(elements.join(':'));\r\n\r\n    };\r\n\r\n    dem.sauvegarde_conseil_adm = function () {\r\n\r\n        var vta_prenom_membre_ca = [];\r\n        var vta_nom_membre_ca = [];\r\n        var vta_no_seq_carac_ca = [];\r\n        var vta_precision = [];\r\n        var pThis;\r\n\r\n        //obtenir la liste  des prenoms\r\n        $('.cair_prenom_membre_ca').each(function () {\r\n            pThis = $(this);\r\n            pvalue = pThis.val();\r\n            vta_prenom_membre_ca.push(pvalue);\r\n        });\r\n\r\n        //obtenir la liste des noms\r\n        $('.cair_nom_membre_ca').each(function () {\r\n            pThis = $(this);\r\n            pvalue = pThis.val();\r\n            vta_nom_membre_ca.push(pvalue);\r\n        });\r\n\r\n        //obtenir la liste des identifiants\r\n        $('.cair_no_seq_carac_ca').each(function () {\r\n            pThis = $(this);\r\n            pvalue = pThis.val();\r\n            vta_no_seq_carac_ca.push(pvalue);\r\n        });\r\n\r\n        //obtenir la liste des precisions\r\n        $('.cair_precision').each(function () {\r\n            pThis = $(this);\r\n            pvalue = pThis.val();\r\n            vta_precision.push(pvalue);\r\n        });\r\n\r\n        apex.server.process(\"SAVE_CA\", {\r\n            f01: vta_no_seq_carac_ca,\r\n            f02: vta_prenom_membre_ca,\r\n            f03: vta_nom_membre_ca,\r\n            f04: vta_precision,\r\n            pageItems: \"#P4_NO_SEQ_DEMAN_PHAQ,#P4_IND_CONSEIL_ADMINISTRATION\"\r\n        }, {\r\n            success: function (pData) {\r\n                apex.region('conseilAdm').refresh();\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n})(shq.dem, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.dem_public = {};\r\n\r\n(function (dem_public, shq, ut, $) {\r\n\r\n    var GRID_LOGEMENT_SUPERFICIE = \"SuperficieLogement\";\r\n    var diese = '#';\r\n\r\n    dem_public.souscrireSuperficieLogement = function () {\r\n        // the model gets released and created at various times such as when the report changes\r\n        // listen for model created events so that we can subscribe to model notifications\r\n        var $id = $(diese.concat(GRID_LOGEMENT_SUPERFICIE));\r\n\r\n        $id.on(\"interactivegridviewmodelcreate\", function (event, ui) {\r\n            var sid,\r\n                model = ui.model;\r\n            // note this is only done for the grid veiw. It could be done for\r\n            // other views if desired. The important thing to realize is that each\r\n            // view has its own model\r\n            if (ui.viewId === \"grid\") {\r\n                sid = model.subscribe({\r\n                    onChange: function (type, change) {\r\n                        var actions = apex.region(GRID_LOGEMENT_SUPERFICIE).call(\"getActions\");\r\n                        if (apex.page.isChanged()) {\r\n                            actions.disable('generer-logement');\r\n                        } else {\r\n                            actions.enable('generer-logement');\r\n                        }   \r\n                    },\r\n                    progressView: this.element\r\n                });\r\n            }\r\n        });\r\n\r\n    };\r\n    //\r\n    // configuration de la barre d'outils de la grid interactive Pour la superficie.\r\n    //   \r\n    dem_public.configurerBarreOutilsSuperficie = function (config) {\r\n        var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar      \r\n        var toolbarGroup = toolbarData.toolbarFind(\"actions1\").controls;\r\n\r\n        var toolbarGroupAction3 = toolbarData.toolbarFind(\"actions3\").controls;\r\n        var toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls;\r\n\r\n        var addrowAction = toolbarData.toolbarFind(\"selection-add-row\");\r\n        var saveAction = toolbarData.toolbarFind(\"save\");\r\n        config.defaultGridViewOptions = config.defaultGridViewOptions || {};\r\n        //\r\n        // Bouton Ajouter\r\n        //\r\n        addrowAction.label = \"Ajouter\";\r\n        addrowAction.icon = \"fa fa-plus\";\r\n        addrowAction.iconBeforeLabel = true;\r\n        addrowAction.hot = true;\r\n        //\r\n        // Bouton save\r\n        //  \r\n        saveAction.icon = \"fa fa-save fam-arrow-down fam-is-info\";\r\n        saveAction.label = \"Superficie\";\r\n        saveAction.iconBeforeLabel = true;\r\n        saveAction.hot = true;\r\n        toolbarGroupAction2.pop();\r\n        //\r\n        // Bouton Annuler modification\r\n        //\r\n        var modelBoutonAnnulerModif = {\r\n            type: \"BUTTON\",\r\n            name: \"annuler-ligne\",\r\n            label: \"Annuler\",\r\n            action: \"selection-revert\",\r\n            icon: \"fa fa-undo\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n\r\n        toolbarGroupAction3.push(modelBoutonAnnulerModif);\r\n        toolbarGroupAction3.push(saveAction);\r\n        //\r\n        // Bouton télecharger\r\n        // \r\n        var modelBoutonTelecharger = {\r\n            type: \"BUTTON\",\r\n            name: \"telecharger\",\r\n            label: \"Télécharger\",\r\n            action: \"show-download-dialog\" ,\r\n            icon: \"fa fa-download\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n        toolbarGroupAction2.push(modelBoutonTelecharger);\r\n        //\r\n        // Bouton Supprimer\r\n        //\r\n        var modelBoutonSupprimer = {\r\n            type: \"BUTTON\",\r\n            name: \"supprimer-ligne\",\r\n            label: \"Supprimer\",\r\n            action: \"selection-delete\",\r\n            icon: \"fa fa-trash-o\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n        toolbarGroupAction3.push(modelBoutonSupprimer);\r\n        //\r\n        // Bouton Générer logement\r\n        //  \r\n        config.initActions = function (actions) {\r\n            actions.add({\r\n                name: \"generer-logement\",\r\n                label: \"Générer logement\",\r\n                action: function (even, ui) {\r\n                    if (!apex.item(\"P200_URL_PAGE_GENERER_LOGEMENT\").isEmpty()) {\r\n                        var itemUrl = apex.item(\"P200_URL_PAGE_GENERER_LOGEMENT\");\r\n                        var url = itemUrl.getValue();\r\n                        apex.navigation.redirect(url);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        var modelBoutonGenererLogement = {\r\n            type: \"BUTTON\",\r\n            action: \"generer-logement\",\r\n            icon: \"fa fa-gears\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n        toolbarGroupAction3.push(modelBoutonGenererLogement);\r\n        //\r\n        // Ajout du mode skipReadonlyCells\r\n        // \r\n        var skipReadonlyCells = {\r\n            skipReadonlyCells: true,\r\n        };\r\n\r\n        $.extend(config.defaultGridViewOptions, skipReadonlyCells);\r\n        //\r\n        // retourne la config\r\n        //\r\n        config.toolbarData = toolbarData;\r\n        return config;\r\n    };\r\n\r\n\r\n    //\r\n    // configuration de la barre d'outils de la grid interactive Pour la superficie.\r\n    //   \r\n    dem_public.configurerBarreOutilsAutresSuperficie = function (config) {\r\n        var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar      \r\n        var toolbarGroup = toolbarData.toolbarFind(\"actions1\").controls;\r\n\r\n        var toolbarGroupAction3 = toolbarData.toolbarFind(\"actions3\").controls;\r\n        var toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls;\r\n\r\n        var addrowAction = toolbarData.toolbarFind(\"selection-add-row\");\r\n        var saveAction = toolbarData.toolbarFind(\"save\");\r\n        config.defaultGridViewOptions = config.defaultGridViewOptions || {};\r\n        //\r\n        // Bouton Ajouter\r\n        //\r\n        addrowAction.label = \"Ajouter\";\r\n        addrowAction.icon = \"fa fa-plus\";\r\n        addrowAction.iconBeforeLabel = true;\r\n        addrowAction.hot = true;\r\n        //\r\n        // Bouton save\r\n        //  \r\n        saveAction.icon = \"fa fa-save fam-arrow-down fam-is-info\";\r\n        saveAction.label = \"Superficie\";\r\n        saveAction.iconBeforeLabel = true;\r\n        saveAction.hot = true;\r\n        toolbarGroupAction2.pop();\r\n        //\r\n        // Bouton Annuler modification\r\n        //\r\n        var modelBoutonAnnulerModif = {\r\n            type: \"BUTTON\",\r\n            name: \"annuler-ligne\",\r\n            label: \"Annuler\",\r\n            action: \"selection-revert\",\r\n            icon: \"fa fa-undo\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n\r\n        toolbarGroupAction3.push(modelBoutonAnnulerModif);\r\n        toolbarGroupAction3.push(saveAction);\r\n        //\r\n        // Bouton Supprimer\r\n        //\r\n        var modelBoutonSupprimer = {\r\n            type: \"BUTTON\",\r\n            name: \"supprimer-ligne\",\r\n            label: \"Supprimer\",\r\n            action: \"selection-delete\",\r\n            icon: \"fa fa-trash-o\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n        toolbarGroupAction3.push(modelBoutonSupprimer);\r\n        //\r\n        // Ajout du mode skipReadonlyCells\r\n        // \r\n        var skipReadonlyCells = {\r\n            skipReadonlyCells: true,\r\n        };\r\n\r\n        $.extend(config.defaultGridViewOptions, skipReadonlyCells);\r\n        //\r\n        // retourne la config\r\n        //\r\n        config.toolbarData = toolbarData;\r\n        return config;\r\n    };\r\n\r\n    //\r\n    // configuration de la barre d'outils de la grid interactive Pour la superficie.\r\n    //   \r\n    dem_public.configurerBarreOutilsRepartition = function (config) {\r\n        var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar      \r\n        var toolbarGroup = toolbarData.toolbarFind(\"actions1\").controls;\r\n\r\n        var toolbarGroupAction3 = toolbarData.toolbarFind(\"actions3\").controls;\r\n        var toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls;\r\n\r\n        var addrowAction = toolbarData.toolbarFind(\"selection-add-row\");\r\n        var saveAction = toolbarData.toolbarFind(\"save\");\r\n        config.defaultGridViewOptions = config.defaultGridViewOptions || {};\r\n        //\r\n        // Bouton Ajouter\r\n        //\r\n        addrowAction.label = \"Ajouter\";\r\n        addrowAction.icon = \"fa fa-plus\";\r\n        addrowAction.iconBeforeLabel = true;\r\n        addrowAction.hot = true;\r\n        //\r\n        // Bouton save\r\n        //  \r\n        saveAction.icon = \"fa fa-save fam-arrow-down fam-is-info\";\r\n        saveAction.label = \"Répartition\";\r\n        saveAction.iconBeforeLabel = true;\r\n        saveAction.hot = true;\r\n        toolbarGroupAction2.pop();\r\n        //\r\n        // Bouton Annuler modification\r\n        //\r\n        var modelBoutonAnnulerModif = {\r\n            type: \"BUTTON\",\r\n            name: \"annuler-ligne\",\r\n            label: \"Annuler\",\r\n            action: \"selection-revert\",\r\n            icon: \"fa fa-undo\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n\r\n        toolbarGroupAction3.push(modelBoutonAnnulerModif);\r\n        toolbarGroupAction3.push(saveAction);\r\n        //\r\n        // Bouton Supprimer\r\n        //\r\n        var modelBoutonSupprimer = {\r\n            type: \"BUTTON\",\r\n            name: \"supprimer-ligne\",\r\n            label: \"Supprimer\",\r\n            action: \"selection-delete\",\r\n            icon: \"fa fa-trash-o\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n        toolbarGroupAction3.push(modelBoutonSupprimer);\r\n\r\n        //\r\n        // Ajout du mode skipReadonlyCells\r\n        // \r\n        var skipReadonlyCells = {\r\n            skipReadonlyCells: true,\r\n        };\r\n\r\n        $.extend(config.defaultGridViewOptions, skipReadonlyCells);\r\n        //\r\n        // retourne la config\r\n        //\r\n        config.toolbarData = toolbarData;\r\n        return config;\r\n    };\r\n})(shq.dem_public, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\n//const { default: validation } = require(\"ajv/dist/vocabularies/validation\");\r\n\r\nvar shq = shq || {};\r\nshq.fdt = {};\r\n\r\n\r\n\r\n(function (fdt, shq, ut, $) {\r\n\r\n    \"use strict\";\r\n\r\n    var diese = '#';\r\n    var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n    var FORMAT_DATE_HEURE = 'YYYY-MM-DD HH24:MI';\r\n    var GRID_TEMPSSAISIEPERIODE = \"tempsSaisiePeriode\";\r\n    var GRID_TEMPSINTERVENTION = \"tempsIntervention\";\r\n    // \r\n    // Fonction qui valide les heures AM\r\n    // \r\n    fdt.validerHeureAM = function (model, change) {\r\n        apex.debug.info('On change validerHeureAM');\r\n\r\n        // Élément modifié\r\n        var heureDebutAm = model.getValue(change.record, \"DH_DEBUT_AM_TEMPS_SAISIE\");\r\n        var heureFinAm = model.getValue(change.record, \"DH_FIN_AM_TEMPS_SAISIE\");\r\n        var dateEnSaisieAm = model.getValue(change.record, \"DT_TEMPS_JOUR\");\r\n        if (Boolean(heureDebutAm) && Boolean(heureFinAm)) {\r\n            var dateDebutAm = apex.date.parse(dateEnSaisieAm + ' ' + heureDebutAm, FORMAT_DATE_HEURE);\r\n            var dateFinAm = apex.date.parse(dateEnSaisieAm + ' ' + heureFinAm, FORMAT_DATE_HEURE);\r\n            var heureDebutApresFinAm = apex.date.isAfter(dateDebutAm, dateFinAm);\r\n            var apexItem = apex.item(change.field);\r\n            if (heureDebutApresFinAm) {\r\n                apexItem.node.setCustomValidity(apex.lang.getMessage(\"SHQ.ITEM.HEURE_INCOHERENTE\"));\r\n            } else {\r\n                apexItem.node.setCustomValidity(\"\");\r\n            }\r\n        }\r\n    };\r\n    // \r\n    // Fonction qui valide les heures PM\r\n    // \r\n    fdt.validerHeurePM = function (model, change) {\r\n        apex.debug.info('On change validerHeurePM');\r\n\r\n        // Élément modifié\r\n\r\n        var heureDebutPm = model.getValue(change.record, \"DH_DEBUT_PM_TEMPS_SAISIE\");\r\n        var heureFinPm = model.getValue(change.record, \"DH_FIN_PM_TEMPS_SAISIE\");\r\n        var dateEnSaisiePm = model.getValue(change.record, \"DT_TEMPS_JOUR\");\r\n\r\n        if (Boolean(heureDebutPm) && Boolean(heureFinPm)) {\r\n            var dateDebutPm = apex.date.parse(dateEnSaisiePm + ' ' + heureDebutPm, FORMAT_DATE_HEURE);\r\n            var dateFinPm = apex.date.parse(dateEnSaisiePm + ' ' + heureFinPm, FORMAT_DATE_HEURE);\r\n            var heureDebutApresFinPm = apex.date.isAfter(dateDebutPm, dateFinPm);\r\n            var apexItem = apex.item(change.field);\r\n            if (heureDebutApresFinPm) {\r\n                apexItem.node.setCustomValidity(apex.lang.getMessage(\"SHQ.ITEM.HEURE_INCOHERENTE\"));\r\n            } else {\r\n                apexItem.node.setCustomValidity(\"\");\r\n            }\r\n        }\r\n    };\r\n    // \r\n    // Fonction qui met en évidence les enregistrement fériés.\r\n    // \r\n    fdt.appliquerMiseEnEvidenceEnregistrement = function (model) {\r\n\r\n        var cssFeriee = apex.lang.getMessage(\"FDT.CSS.FERIEE\");\r\n\r\n        model.forEach(function (record, index, id) {\r\n            var journeeFerrie = model.getValue(record, \"INDIC_FERIEE\");\r\n            var meta = model.getRecordMetadata(id);\r\n\r\n            meta.highlight = journeeFerrie === 'O' ? cssFeriee : '';\r\n        });\r\n    };\r\n    //\r\n    // This is the general pattern for subscribing to model notifications\r\n    //\r\n    // need to do this here rather than in Execute when Page Loads so that the handler\r\n    // is setup BEFORE the IG is initialized otherwise miss the first model created event\r\n    fdt.souscrireFeuilleDeTemps = function () {\r\n        // the model gets released and created at various times such as when the report changes\r\n        // listen for model created events so that we can subscribe to model notifications\r\n        var $id = $(diese.concat(GRID_TEMPSSAISIEPERIODE));\r\n\r\n        $id.on(\"interactivegridviewmodelcreate\", function (event, ui) {\r\n            var sid,\r\n                model = ui.model;\r\n            // note this is only done for the grid veiw. It could be done for\r\n            // other views if desired. The important thing to realize is that each\r\n            // view has its own model\r\n            if (ui.viewId === \"grid\") {\r\n                fdt.appliquerMiseEnEvidenceEnregistrement(model);\r\n                sid = model.subscribe({\r\n                    onChange: function (type, change) {\r\n                        var heureAM = ['DH_DEBUT_AM_TEMPS_SAISIE', 'DH_FIN_AM_TEMPS_SAISIE'];\r\n                        var heurePM = ['DH_DEBUT_PM_TEMPS_SAISIE', 'DH_FIN_PM_TEMPS_SAISIE'];\r\n                        if (type === \"set\") {\r\n                            // don't bother to recalculate if other columns change\r\n                            if (heureAM.indexOf(change.field) > -1) {\r\n                                fdt.validerHeureAM(model, change);\r\n                            } else if (heurePM.indexOf(change.field) > -1) {\r\n                                fdt.validerHeurePM(model, change);\r\n                            }\r\n                        }\r\n                        fdt.appliquerMiseEnEvidenceEnregistrement(model);\r\n                    },\r\n                    progressView: this.element\r\n                });\r\n            }\r\n        });\r\n\r\n    };\r\n    //\r\n    // Sélection des périodes dans la  page de saisie du temps \r\n    // \r\n    fdt.selectionPeriode = function (pRegionContainer, pIndexTab, pDebutPeriodeItem, pDebutPeriodeVal, pFinPeriodeItem, pFinPeriodeVal) {\r\n\r\n        var TAB_CONTAINER_CLASS = 't-Tabs',\r\n            TAB_ITEM_CLASS = 't-Tabs-item',\r\n            IS_CURRENT_CLASS = 'is-active';\r\n\r\n        //enlever la classe is-active de l'ancien élément sélectionné\r\n\r\n        $('#' + pRegionContainer).find('.' + TAB_ITEM_CLASS + '.' + IS_CURRENT_CLASS).removeClass(IS_CURRENT_CLASS);\r\n\r\n        //ajouter la classe is-active sur l'élément sélectionné\r\n\r\n        $('#' + pRegionContainer).find('.' + TAB_ITEM_CLASS).eq(pIndexTab).addClass(IS_CURRENT_CLASS);\r\n        apex.item(pDebutPeriodeItem).setValue(pDebutPeriodeVal);\r\n        apex.item(pFinPeriodeItem).setValue(pFinPeriodeVal);\r\n        apex.item('P2_REFRESH_FDT_INTERVENTION').setValue(pIndexTab);\r\n    };\r\n    //\r\n    // Mise à jour du lien pour l'ajout d'absence\r\n    // \r\n    fdt.obtenirHrefAjouterAbsence = function () {\r\n        var itemUrl = apex.item(\"P2_URL_PAGE_ABSENCE\");\r\n        var url = itemUrl.getValue();\r\n\r\n        return url;\r\n    };\r\n    // \r\n    // Configuration de la barre d'outils de la feuille de temps     \r\n    //\r\n    fdt.configurerSaisieTemps = function (config) {\r\n\r\n        var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar  \r\n        // \r\n        // section de la toolbar\r\n        //    \r\n        var toolbarGroupAction1 = toolbarData.toolbarFind(\"actions1\").controls,\r\n            toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls,\r\n            toolbarGroupAction3 = toolbarData.toolbarFind(\"actions3\").controls,\r\n            toolbarGroupAction4 = toolbarData.toolbarFind(\"actions3\").controls;\r\n        //\r\n        // Constantes\r\n        //\r\n        var OUI = 'O',\r\n            NON = 'N',\r\n            ABSENCE = 'ABS',\r\n            VACANCE = 'VAC';\r\n        //\r\n        // Boutons annuler modif\r\n        //\r\n        //var modelBoutonAnnulerModif = {\r\n        //    type: \"BUTTON\",\r\n        //    name: \"annuler-ligne\",\r\n        //    label: \"Annuler\",\r\n        //    action: \"selection-revert\",\r\n        //    icon: \"fa fa-undo\",\r\n        //    iconBeforeLabel: true,\r\n        //    hot: false\r\n        //};\r\n\r\n        //toolbarGroupAction3.push(modelBoutonAnnulerModif);\r\n        //\r\n        // Bouton Enregistrer\r\n        // \r\n        var saveAction = toolbarData.toolbarFind(\"save\");\r\n        saveAction.icon = \"fa fa-table fam-arrow-down fam-is-info\";\r\n        saveAction.label = \"Enregistrer mon temps \";\r\n        saveAction.iconBeforeLabel = true;\r\n        saveAction.hot = true;\r\n        toolbarGroupAction2.pop();\r\n        toolbarGroupAction3.push(saveAction);\r\n        //\r\n        // fonctions Filtre\r\n        // \r\n        var actionFiltre = function (event, element) {\r\n\r\n            var itemFiltreAbscence = apex.item(\"P2_FILTRE_TEMPS_SAISIE_ABS\");\r\n            var itemFiltreVacance = apex.item(\"P2_FILTRE_TEMPS_SAISIE_VAC\");\r\n            //\r\n            // Détrermine quel bouton a été cliqué\r\n            //         \r\n            var dataAction = this.name;\r\n\r\n            var itemvaleur;\r\n            var item;\r\n\r\n            switch (dataAction) {\r\n                case 'filtre-absence':\r\n                    itemvaleur = ABSENCE;\r\n                    item = itemFiltreAbscence;\r\n                    break;\r\n                case 'filtre-vacance':\r\n                    itemvaleur = VACANCE;\r\n                    item = itemFiltreVacance;\r\n                    break;\r\n                default:\r\n                    itemFiltre.setValue(null);\r\n            }\r\n\r\n            if (this.get()) {\r\n                item.setValue('');\r\n                this.set(false);\r\n                $(element).removeClass(\"is-active-filtre-fdt\");\r\n            } else {\r\n                item.setValue(itemvaleur);\r\n                this.set(true);\r\n                $(element).addClass(\"is-active-filtre-fdt\");\r\n            }\r\n\r\n            apex.region(GRID_TEMPSSAISIEPERIODE).refresh();\r\n\r\n            return this.get();\r\n\r\n        };\r\n        //\r\n        // Appel de la page de saisie des absences\r\n        //  \r\n        var dialogueAbsence = function () {\r\n            var url = fdt.obtenirHrefAjouterAbsence();\r\n            apex.navigation.redirect(url);\r\n        };\r\n        //\r\n        // Process qui sauvegarde la grid passé en paramètre.\r\n        // \r\n        var processSave = function (ig, grid) {\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                //\r\n                // Si il y a des erreurs sur la gird alors on fait rien\r\n                // \r\n                if (grid.model.hasErrors()) {\r\n                    reject(false);\r\n                } else {\r\n\r\n                    var modelProcessSave = grid.model.save(resolve(true));\r\n                    //\r\n                    // Sauvegarde en cour ou rien à mettre à jour \r\n                    //\r\n                    if (!modelProcessSave) {\r\n                        resolve(true);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        //\r\n        // Boutons Filtre\r\n        //        \r\n        config.initActions = function (actions) {\r\n\r\n            actions.add([{\r\n                name: \"filtre-absence\",\r\n                label: 'Absence',\r\n                state: false,\r\n                action: actionFiltre,\r\n                get: function () {\r\n                    return this.state;\r\n                },\r\n                set: function (v) {\r\n                    this.state = v;\r\n                    return this.state;\r\n                }\r\n            },\r\n            {\r\n                name: \"filtre-vacance\",\r\n                label: 'Vacances',\r\n                state: false,\r\n                action: actionFiltre,\r\n                get: function () {\r\n                    return this.state;\r\n                },\r\n                set: function (v) {\r\n                    this.state = v;\r\n                    return this.state;\r\n                }\r\n\r\n            },\r\n            //\r\n            // définition de l'action du bouton Ajouter absence\r\n            // \r\n            {\r\n                name: \"ajouter-absence\",\r\n                label: \"Absence\",\r\n                action: function (event, el) {\r\n                    //\r\n                    // EA_RESSOURCE_SAISI_INTRV est une constante déclarer dans la page dans le\r\n                    // Function and Global Variable Declaration\r\n                    //                                         \r\n                    var indicateurMoisComplet = apex.item(\"P2_IND_MOIS_COMPLET_INTERV\").getValue(),\r\n                        igTempsPeriode = apex.region(GRID_TEMPSSAISIEPERIODE),\r\n                        gridTempPeriode = igTempsPeriode.call(\"getViews\").grid,\r\n                        igIntervention,\r\n                        gridIntervention;\r\n\r\n                    var promiseTempsPeriode = processSave(igTempsPeriode, gridTempPeriode),\r\n                        promiseIntervention,\r\n                        arrayPromise = new Array(0);\r\n\r\n                    if (indicateurMoisComplet == 'N' &&\r\n                        EA_RESSOURCE_SAISI_INTRV === 'O') {\r\n\r\n                        igIntervention = apex.region(GRID_TEMPSINTERVENTION);\r\n                        gridIntervention = igIntervention.call(\"getViews\").grid;\r\n                        promiseIntervention = processSave(igIntervention, gridIntervention);\r\n                        arrayPromise.push(promiseTempsPeriode, promiseIntervention);\r\n                    } else {\r\n                        igIntervention = null;\r\n                        gridIntervention = null;\r\n                        promiseIntervention = null;\r\n                        arrayPromise.push(promiseTempsPeriode);\r\n                    }\r\n\r\n                    Promise.all(arrayPromise).then(function (retours) {\r\n                        if (retours.every(Boolean)) {\r\n                            dialogueAbsence();\r\n                        }\r\n                    })\r\n                        .catch(function (error) {\r\n                            shq.page.alert(apex.lang.getMessage(\"FDT.ABSENCE.ERREUR\"));\r\n                        });\r\n                }\r\n            }]);\r\n        };\r\n        //\r\n        // définition des boutons personnalisés de la grid\r\n        // \r\n        var modelBoutonAjouterAbsence = {\r\n            type: \"BUTTON\",\r\n            icon: \"fa fa-plus\",\r\n            action: \"ajouter-absence\",\r\n            iconBeforeLabel: true,\r\n            hot: true\r\n        };\r\n\r\n        var modelBoutonFiltreAbsence = {\r\n            type: \"BUTTON\",\r\n            action: \"filtre-absence\",\r\n            icon: 'fa fa-filter',\r\n            iconBeforeLabel: true,\r\n        };\r\n\r\n        var modelBoutonFiltreVacance = {\r\n            type: \"BUTTON\",\r\n            action: 'filtre-vacance',\r\n            icon: 'fa fa-filter',\r\n            iconBeforeLabel: true\r\n\r\n        };\r\n        //\r\n        // Ajout des boutons filtres sur la grid.\r\n        //     \r\n        toolbarGroupAction2.push(modelBoutonFiltreAbsence);\r\n        toolbarGroupAction2.push(modelBoutonFiltreVacance);\r\n        //\r\n        // Détermine si on affiche le bouton absence selon l'indicateur interne ou externe de la personne ressource\r\n        // \r\n        var indicateurAjoutBoutonAbsence = function () {\r\n            //\r\n            // La variable EA_INTERNE_OU_EXTERNE est déclaré dans la page 2 dans Function and Global Variable Declaration\r\n            //  \r\n            if (EA_INTERNE_OU_EXTERNE === 'I') {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        if (indicateurAjoutBoutonAbsence()) {\r\n            toolbarGroupAction4.push(modelBoutonAjouterAbsence);\r\n        }        \r\n        //\r\n        // Ajout du mode skipReadonlyCells\r\n        // \r\n        config.defaultGridViewOptions = config.defaultGridViewOptions || {};\r\n        var skipReadonlyCells = {\r\n            skipReadonlyCells: true,\r\n        };\r\n        $.extend(config.defaultGridViewOptions, skipReadonlyCells);\r\n        //\r\n        // retourne la config\r\n        //\r\n        config.toolbarData = toolbarData;\r\n        return config;\r\n    };\r\n    // \r\n    // Configuration de la barre d'outils de la feuille de temps des intervention    \r\n    //\r\n    fdt.configurerSaisieIntervention = function (config) {\r\n\r\n        var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar  \r\n        // \r\n        // section de la toolbar\r\n        //    \r\n        var toolbarGroupAction1 = toolbarData.toolbarFind(\"actions1\").controls,\r\n            toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls,\r\n            toolbarGroupAction3 = toolbarData.toolbarFind(\"actions3\").controls;           \r\n        //\r\n        // Bouton Ajouter\r\n        //            \r\n        var addrowAction = toolbarData.toolbarFind(\"selection-add-row\");\r\n        addrowAction.label = \"Ajouter\";\r\n        addrowAction.icon = \"fa fa-plus\";\r\n        addrowAction.iconBeforeLabel = true;\r\n        addrowAction.hot = true;\r\n        // toolbarGroupAction3.push(modelBoutonAnnulerModif);\r\n        //\r\n        // Bouton Enregistrer\r\n        // \r\n        var saveAction = toolbarData.toolbarFind(\"save\");\r\n        saveAction.icon = \"fa fa-table fam-arrow-down fam-is-info\";\r\n        saveAction.label = \"Enregistrer\";\r\n        saveAction.iconBeforeLabel = true;\r\n        saveAction.hot = true;\r\n        toolbarGroupAction2.pop();\r\n        toolbarGroupAction3.push(saveAction);\r\n        //\r\n        // Bouton Supprimer\r\n        //\r\n        var modelBoutonSupprimer = {\r\n            type: \"BUTTON\",\r\n            name: \"supprimer-ligne\",\r\n            label: \"Supprimer\",\r\n            action: \"selection-delete\",\r\n            icon: \"fa fa-trash-o\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n        };\r\n        toolbarGroupAction3.push(modelBoutonSupprimer);\r\n        //\r\n        // Ajout du mode skipReadonlyCells\r\n        // \r\n        var skipReadonlyCells = {\r\n            skipReadonlyCells: true,\r\n        };\r\n        config.defaultGridViewOptions = config.defaultGridViewOptions || {};\r\n        $.extend(config.defaultGridViewOptions, skipReadonlyCells);\r\n        //\r\n        // retourne la config\r\n        //\r\n        config.toolbarData = toolbarData;\r\n        return config;\r\n    };\r\n\r\n})(shq.fdt, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.gpr = {};\r\n\r\n(function (shq, gpr, util, $) {\r\n   \"use strict\";\r\n\r\n   gpr.ajusterFocusContactClient =  function(itemContactClient)  {\r\n      var coTypClient = apex.item(itemContactClient).getValue();\r\n      var idFocusNombre;\r\n      var selectorJq = \"label[for=\\\"\".concat(itemContactClient).concat(\"_idFocusNombre\\\"\");\r\n\r\n      switch (coTypClient) {\r\n         case 'DOMIC':\r\n            // code block\r\n            idFocusNombre = '0';\r\n            break;\r\n         case 'BURE':\r\n            // code block\r\n            idFocusNombre = '1';\r\n            break;\r\n         case 'CELL':\r\n            // code block\r\n            idFocusNombre = '2';\r\n            break;\r\n         case 'TELEA':\r\n            // code block\r\n            idFocusNombre = '3';\r\n            break;\r\n         case 'FAX':\r\n            // code block\r\n            idFocusNombre = '4';\r\n            break;\r\n         default:\r\n            // code block\r\n            // Autre\r\n            idFocusNombre = '5';\r\n      }\r\n      selectorJq = selectorJq.replace('idFocusNombre', idFocusNombre);\r\n      $(selectorJq).focus();\r\n   };\r\n   //\r\n   // Ajuster le focus sur le pills buttons de l'adresse\r\n   //\r\n   gpr.ajusterFocueTypClient = function (itemTypClient) {\r\n      var coTypClient = apex.item(itemTypClient).getValue();\r\n      var idFocusNombre;\r\n      var selectorJq = \"label[for=\\\"P18_CO_TYP_CLIENT_idFocusNombre\\\"\";\r\n\r\n      switch (coTypClient) {\r\n         case 'COPR':\r\n            // code block\r\n            idFocusNombre = '1';\r\n            break;\r\n         case 'REPO':\r\n            // code block\r\n            idFocusNombre = '2';\r\n            break;\r\n         default:\r\n            // code block\r\n            // Propriétaire\r\n            idFocusNombre = '0';\r\n      }\r\n      selectorJq = selectorJq.replace('idFocusNombre', idFocusNombre);\r\n      $(selectorJq).focus();\r\n   };\r\n})(shq, shq.gpr, apex.util, apex.jQuery);","/* global apex */\r\n/* global moment */\r\n\r\nvar shq = shq || {};\r\nshq.pil = {};\r\n\r\n(function (shq, pil, util, $) {\r\n   \"use strict\";\r\n\r\n   var C_GRID = \"grid\",\r\n      C_SET = \"set\";\r\n\r\n   pil.calculerNombrejour = function (model, recordId) {\r\n\r\n      var C_DAYS = \"days\";\r\n      var meta = model.getRecordMetadata(recordId);\r\n      var rec = model.getRecord(recordId);\r\n\r\n      if (meta.inserted || meta.updated) {\r\n         /*\r\n          * Force un objet moment à null pour qu'il soit volontairement invalide \r\n          */\r\n         var dtDebut = model.getValue(rec, \"DT_DEBUT_AN\").lenght === 0 ? moment(null) : moment(model.getValue(rec, \"DT_DEBUT_AN\"));\r\n         var dtFin = model.getValue(rec, \"DT_FIN_AN\").lenght === 0 ? moment(null) : moment(model.getValue(rec, \"DT_FIN_AN\"));\r\n\r\n         if (dtDebut.isValid() && dtFin.isValid() && dtDebut.isBefore(dtFin)) {\r\n            dtFin.add(1, C_DAYS);\r\n            /*\r\n             * Le setValue prends une valeur en sting seulement, corrigé dans les versions supérieurs\r\n             */\r\n            var nbjour = dtFin.diff(dtDebut, C_DAYS).toString();\r\n            model.setValue(rec, \"NB_JOUR\", nbjour);\r\n         }\r\n      }\r\n\r\n   };\r\n\r\n   pil.gridCalendrierPil = function () {\r\n\r\n      $(\"#calendrierPil\").on(\"interactivegridviewmodelcreate\", function (event, ui) {\r\n         // eslint-disable-next-line no-unused-vars\r\n         var sid,\r\n            model = ui.model;\r\n         \r\n         if (ui.viewId === C_GRID) {\r\n            sid = model.subscribe({\r\n               /* \r\n                * Bind l'événement change au model de la grid \r\n                */\r\n               onChange: function (type, change) {\r\n\r\n                  var dateColonnes = ['DT_DEBUT_AN', 'DT_FIN_AN'];\r\n\r\n                  if (type === C_SET) {\r\n                     if (dateColonnes.indexOf(change.field) > -1) {\r\n                        setTimeout(function () {\r\n                           pil.calculerNombrejour(model, change.recordId);\r\n                        }, 0);\r\n                     }\r\n                  }\r\n               }\r\n            });\r\n         }\r\n      });\r\n   };\r\n})(shq, shq.pil, apex.util, apex.jQuery);","/* \r\n   * plug pour ie 11. À retirer à partir de juin 2022\r\n   */\r\n\r\n//\r\n// Polyfill pour la finction includes\r\n// \r\nif (!String.prototype.includes) {\r\n    String.prototype.includes = function(search, start) {\r\n      'use strict';\r\n   \r\n      if (search instanceof RegExp) {\r\n        throw TypeError('first argument must not be a RegExp');\r\n      }\r\n      if (start === undefined) { start = 0; }\r\n      return this.indexOf(search, start) !== -1;\r\n    };\r\n   }\r\n","/* global apex */\r\n\r\n\r\nvar shq = shq || {};\r\nshq.psa  = {};\r\n\r\n(function (psa, shq, ut, $) {\r\n  \r\n   //\r\n   // Modifie la valeur du label sur les valeurs égale à 0 dans le graphique.\r\n   // \r\n   psa.graph_subLabelValeurEgaleA0 = function (options,subString) \r\n   {\r\n        options.dataFilter = function(data)\r\n        {\r\n            /*for (var serie of data.series) // NON SUPPORTER PAR Internet explorer\r\n            {\r\n                for (var item of serie.items)\r\n                {\r\n                    if(item.value == 0) \r\n                    {\r\n                        item.label = subString;\r\n                    }\r\n                }\r\n            }*/\r\n            var serie;\r\n            var item;\r\n            for (serie in data.series)\r\n            {\r\n                for (item in data.series[serie].items)\r\n                {\r\n                    if(data.series[serie].items[item].value == 0)\r\n                    {\r\n                        data.series[serie].items[item].label = subString;\r\n                    }\r\n                }\r\n            }\r\n            return data;\r\n        };\r\n        return options;\r\n   };\r\n})(shq.psa, shq, apex.theme42, apex.jQuery);","\r\n/*******************************************************************************\r\n *                Registre des modifications\r\n * Date           Nom                     Description\r\n * 2018-05-22     Michel Lessard          Création initiale\r\n ******************************************************************************/\r\n\r\n/*******************************************************************************\r\n * Initialiser la variable de namespace shq\r\n ******************************************************************************/\r\n\r\n/* global apex */\r\n\r\nvar shq = shq || {};\r\n\r\n\r\n//\r\n//\r\n//\r\n\r\n(function (shq, apex, util, $) {\r\n   \"use strict\";\r\n\r\n\r\n   //Permettre de définir le titre d'une page modal\r\n   //Le code doit être exécuté par la page modal\r\n   shq.definirTitreModal = function (pTitre) {\r\n      util.getTopApex().$(\".ui-dialog-content\").dialog(\"option\", \"title\", pTitre);\r\n   };\r\n\r\n   //Permet d'afficher les sous-éléments d'un menu sur le click de clui-ci\r\n   function _initNavMenuAccordion() {\r\n      //\r\n      //Accordion-Like Navigation Menu: Menu avec lien égal à '#'\r\n      //\r\n      $('#t_Body_nav #t_TreeNav').on('click', 'ul li.a-TreeView-node div.a-TreeView-content:has(a[href=\"#\"])', function () {\r\n         $(this).prev('span.a-TreeView-toggle').click();\r\n      });\r\n      //\r\n      //Accordion-Like Navigation Menu: Menu sans lien\r\n      //\r\n      $('#t_Body_nav #t_TreeNav').on('click', 'ul li.a-TreeView-node div.a-TreeView-content:not(:has(a))', function () {\r\n         $(this).prev('span.a-TreeView-toggle').click();\r\n      });\r\n      // \r\n      // Permet de mettre un title sur les items de menu.\r\n      // \r\n      if ($(\"#t_TreeNav\").treeView !== undefined) {\r\n         $(\"#t_TreeNav\").treeView({\r\n            tooltip: {\r\n               show: { delay: 1000, effect: \"blind\", duration: 800 },\r\n               content: function (callback, node) {\r\n                  return node.label;\r\n               }\r\n            }\r\n         });\r\n      }\r\n   }\r\n   //\r\n   function _fixMessageClose() {\r\n      var APEX_SUCCESS_MESSAGE = \"#APEX_SUCCESS_MESSAGE\",\r\n         C_BTN_FERMR_MESG = 't-Button--closeAlert',\r\n         S_BTN_FERMR_MESG = '.' + C_BTN_FERMR_MESG;\r\n\r\n      var msg$ = $(APEX_SUCCESS_MESSAGE);\r\n\r\n      msg$.find(S_BTN_FERMR_MESG).click(function () {\r\n         apex.message.hidePageSuccess();\r\n      });\r\n   }\r\n   //\r\n   function _autoDismissMessage() {\r\n      var opt = {\r\n         autoDismiss: true,\r\n         duration: 4000\r\n      };\r\n      //\r\n      // this only applys configuration when base page has a process success message ready to display\r\n      //\r\n      apex.theme42.configureSuccessMessages(opt);\r\n      _fixMessageClose();\r\n\r\n      apex.message.setThemeHooks({\r\n         beforeShow: function (pMsgType) {\r\n            if (pMsgType === apex.message.TYPE.SUCCESS) {\r\n               apex.theme42.configureSuccessMessages(opt);\r\n               _fixMessageClose();\r\n            }\r\n         }\r\n      });\r\n   }\r\n   //\r\n   // Détection du browser \r\n   //   \r\n   // Chrome\r\n   shq.isNavigateurChrome = function () {\r\n      var userAgent = navigator.userAgent;\r\n      var blBrowser = false;\r\n      if (userAgent.search(\"Chrome\") > 0) {\r\n         blBrowser = true;\r\n      }\r\n      return blBrowser;\r\n   };\r\n   //\r\n   // Iexplorer 11\r\n   //\r\n   shq.isNavigateurIexplorer11 = function () {\r\n      var userAgent = navigator.userAgent;\r\n      var blBrowser = false;\r\n      if (userAgent.search(\"/MSIE|Trident/\") > 0) {\r\n         blBrowser = true;\r\n      }\r\n      return blBrowser;\r\n   };\r\n   //\r\n   // firefox\r\n   //   \r\n   shq.isNavigateurFirefox = function () {\r\n      var userAgent = navigator.userAgent;\r\n      var blBrowser = false;\r\n      if (userAgent.search(\"Firefox\") > 0) {\r\n         blBrowser = true;\r\n      }\r\n      return blBrowser;\r\n   };\r\n   //\r\n   // Safari\r\n   //\r\n   shq.isNavigateurSafari = function () {\r\n\r\n      var isSafari = /constructor/i.test(window.HTMLElement) ||\r\n         (function (p) {\r\n            return p.toString() === \"[object SafariRemoteNotification]\";\r\n         })\r\n            (!window.safari ||\r\n               (typeof safari !== 'undefined' && safari.pushNotification));\r\n\r\n      return isSafari;\r\n   };\r\n   //\r\n   // Edge\r\n   //\r\n   shq.isNavigateurEdge = function () {\r\n      var userAgent = navigator.userAgent;\r\n      var blBrowser = false;\r\n      if (userAgent.search(\"Edg/\") > 0) {\r\n         blBrowser = true;\r\n      }\r\n      return blBrowser;\r\n   };\r\n   //\r\n   //Execution au Chargement de la page\r\n   //\r\n   $(document).ready(function () {\r\n       _initNavMenuAccordion();\r\n       _autoDismissMessage();\r\n    }); \r\n\r\n})(shq, apex, apex.util, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.dialog = {};\r\n\r\n(function (dialog, shq, ut, $) {\r\n   \"use strict\";\r\n   dialog.confirmeFermetureDialog = function (event, ui) {\r\n      var l_original_bouton_Ok = apex.lang.getMessage(\"APEX.DIALOG.OK\");\r\n      var l_nouveau_bouton_ok = apex.lang.getMessage(\"SHQ.DIALOG.WARNONSAVE.QUITTER\");\r\n      var message = apex.lang.getMessage(\"APEX.WARN_ON_UNSAVED_CHANGES\");\r\n\r\n      //change le libellé des boutons\r\n      apex.lang.addMessages({ \"APEX.DIALOG.OK\": l_nouveau_bouton_ok });\r\n\r\n      if (apex.page.isChanged()) {\r\n         apex.message.confirm(message, function (okPressed) {\r\n            if (okPressed) {\r\n               apex.lang.addMessages({ \"APEX.DIALOG.OK\": l_original_bouton_Ok });\r\n               apex.navigation.dialog.close(true);\r\n            }\r\n         });\r\n      } else {\r\n         apex.lang.addMessages({ \"APEX.DIALOG.OK\": l_original_bouton_Ok });\r\n         apex.navigation.dialog.close(true);\r\n      }\r\n\r\n   };   \r\n   dialog.validerFermetureDialogue = function (elementDialogue) {\r\n      var uiDialogueNotification = 'ui-dialog--notification';\r\n      var uiDialogueInline = 'ui-dialog--inline';\r\n  \r\n      var classList = elementDialogue.target.parentElement.classList;\r\n  \r\n      return $.inArray(uiDialogueNotification, classList) === -1 &&\r\n        $.inArray(uiDialogueInline, classList) === -1;\r\n    };    \r\n})(shq.dialog, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.ig = {};\r\n\r\n(function (ig, shq, ut, $) {\r\n   \"use strict\";\r\n   var diese = '#';\r\n   var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n\r\n   //\r\n   // Obtenir une la valeur d'une cellule correspondant au record courant et à un nom de colonne.\r\n   // \r\n   ig.obtenirValeurColonneRecordCourant = function (nomGrille, nomColonne) {\r\n      var valeur = \"\";\r\n\r\n      var widget = apex.region(nomGrille).widget();\r\n      if (!(widget && widget !== \"null\" && widget !== \"undefined\")) {\r\n         return (\"\");\r\n      }\r\n\r\n      var grid = widget.interactiveGrid('getViews', 'grid');\r\n      if (!(grid && grid !== \"null\" && grid !== \"undefined\")) {\r\n         return (\"\");\r\n      }\r\n\r\n      var model = grid.model;\r\n      if (!(model && model !== \"null\" && model !== \"undefined\")) {\r\n         return (\"\");\r\n      }\r\n\r\n      var selectedRecords = grid.getSelectedRecords();\r\n\r\n      if (selectedRecords.length == 1) {\r\n         valeur = model.getValue(selectedRecords[0], nomColonne);\r\n      }\r\n\r\n      return (valeur);\r\n   };\r\n   //\r\n   // Définir la valeur par defaut pour une colonne d'une grid interactive\r\n   // \r\n   ig.definirValeurDefautColonne = function (nomGrille, nomColonne, valeurDefaut) {\r\n\r\n      var appliquerdefaut = true;\r\n\r\n      var widget = apex.region(nomGrille).widget();\r\n      if (!(widget && widget !== \"null\" && widget !== \"undefined\")) {\r\n         appliquerdefaut = false;\r\n      }\r\n\r\n      var grid = widget.interactiveGrid('getViews', 'grid');\r\n      if (!(grid && grid !== \"null\" && grid !== \"undefined\")) {\r\n         appliquerdefaut = false;\r\n      }\r\n\r\n      var model = grid.model;\r\n      if (!(model && model !== \"null\" && model !== \"undefined\")) {\r\n         appliquerdefaut = false;\r\n      }\r\n\r\n      var igFields = model.getOption(\"fields\").nomColonne;\r\n      if (!(igFields && igFields !== \"null\" && igFields !== \"undefined\")) {\r\n         appliquerdefaut = false;\r\n      }\r\n\r\n      if (appliquerdefaut) {\r\n         model.getOption(\"fields\").nomColonne.defaultValue = valeurDefaut;\r\n      }\r\n   };\r\n   //\r\n   // Permet de rengre une IG éditable ou non. Gère aussi l'affichage et des boutons concernés.\r\n   // \r\n   ig.activerDesactiverEditable = function (igStaticID, activer) {\r\n      if (igStaticID !== undefined && activer !== undefined) {\r\n\r\n         var actions = [\"edit\", \"selection-add-row\", \"selection-delete\", \"selection-duplicate\", \"row-add-row\", \"row-delete\", \"row-duplicate\", \"insert-record\", \"delete-record\", \"selection-revert\"];\r\n         apex.region(igStaticID).call(\"getCurrentView\").model.setOption(\"editable\", activer);\r\n\r\n         actions.forEach(function (item) {\r\n            switch (activer) {\r\n               case true:\r\n                  apex.region(igStaticID).call(\"getActions\").show(item);\r\n                  break;\r\n               case false:\r\n                  apex.region(igStaticID).call(\"getActions\").hide(item);\r\n                  break;\r\n               default:\r\n            }\r\n         });\r\n      }\r\n   }; //Fin ig.activerDesactiverEditable\r\n   //\r\n   // Permet de d'activer l'option d'ajouter une ligne dans une grid.\r\n   // \r\n   ig.activerDesactiverAjouterLigne = function (igStaticID, activer) {\r\n      if (igStaticID !== undefined && activer !== undefined) {\r\n\r\n         var actions = [\"selection-add-row\", \"row-add-row\", \"row-duplicate\", \"selection-duplicate\"];\r\n\r\n         actions.forEach(function (item) {\r\n            switch (activer) {\r\n               case true:\r\n                  apex.region(igStaticID).call(\"getActions\").enable(item);\r\n                  break;\r\n               case false:\r\n                  apex.region(igStaticID).call(\"getActions\").disable(item);\r\n                  break;\r\n               default:\r\n            }\r\n         });\r\n      }\r\n   }; //Fin ig.activerDesactiverAjouterLigne\r\n   //\r\n   // Modifie la visibilité des colonnes passer en paramètre pour la région donné.\r\n   // \r\n   ig.modifierVisibiliteColonnes = function (colArray, gridRegionId, visibility) {\r\n      var gridView = apex.region(gridRegionId).call(\"getViews\").grid;\r\n      var gridView$ = gridView.view$;\r\n\r\n      gridView.getColumns().forEach(function (element) {\r\n         /*\r\n         //if(colArray.includes(x.property)) -- Non supporté par IExplorer. . .\r\n         */\r\n         if (colArray.indexOf(element.property) >= 0) {\r\n            if (visibility) {\r\n               gridView$.grid(\"showColumn\", element.property);\r\n            }\r\n            else {\r\n               gridView$.grid(\"hideColumn\", element.property);\r\n            }\r\n         }\r\n      });\r\n   };\r\n   //\r\n   // Configuration le tooltips des colonnes \r\n   // \r\n   ig.configTooltipColonne = function (options, listColonne) {\r\n      options.defaultGridViewOptions = options.defaultGridViewOptions || {};\r\n      var gridOptions = {\r\n         tooltip: {\r\n            content: function (callback, model, recordMeta, colMeta, columnDef) {\r\n               var text;\r\n               if (columnDef && recordMeta) {\r\n                  if ($.inArray(columnDef.property, listColonne) >= 0) {\r\n                     text = model.getValue(recordMeta.record, columnDef.property);\r\n                  }\r\n               }\r\n               return text;\r\n            }\r\n         }\r\n      };\r\n\r\n      $.extend(options.defaultGridViewOptions, gridOptions);\r\n      return options;\r\n   };\r\n   //\r\n   // Configuration de la largeur de la colonne \r\n   // \r\n   ig.configColonneStretch = function (options, blStretch, largeur) {\r\n      options.defaultGridColumnOptions = options.defaultGridColumnOptions || {};\r\n      var configColonne;\r\n\r\n      if (largeur !== undefined && largeur > 0) {\r\n         configColonne = {\r\n            noStretch: blStretch,\r\n            width: largeur\r\n         };\r\n      }\r\n      $.extend(options.defaultGridColumnOptions, configColonne);\r\n      return options;\r\n   };\r\n   //\r\n   // Mets un numéro de séquence comme première colonne\r\n   // \r\n   ig.configColonneRowHeaderSequence = function (options) {\r\n      options.defaultGridViewOptions = options.defaultGridColumnOptions || {};\r\n      var rowHeader = {\r\n         multiple: false,\r\n         hideControl: true,\r\n         rowHeader: \"sequence\"\r\n      };\r\n      $.extend(options.defaultGridViewOptions, rowHeader);\r\n      return options;\r\n   };\r\n   //\r\n   // Configuration da la colonne APEX$ROW_ACTION\r\n   //\r\n   ig.configApexRowAction = function (config) {\r\n      config.defaultGridColumnOptions = config.defaultGridColumnOptions || {};\r\n      // Désactive la sélection de l'entête de colonne. Empêche son déplacement\r\n      var rowAction = {\r\n         noHeaderActivate: true,\r\n         usedAsRowHeader: false\r\n      };\r\n      //\r\n      // Retour de la config de la colonne.\r\n      // \r\n      $.extend(config.defaultGridColumnOptions, rowAction);\r\n      return config;\r\n   };\r\n   //\r\n   // Configuration da la colonne Edition Lien \r\n   // \r\n   ig.configurerOptionEditionLienIg = function (config) {\r\n      config.defaultGridColumnOptions = config.defaultGridColumnOptions || {};\r\n      // Désactive la sélection de l'entête de colonne pour l'edition d'un enregistrement.      \r\n      var editionLien = {\r\n         noHeaderActivate: true,\r\n         label: '',\r\n         noStretch: true,\r\n         width: 45\r\n      };\r\n      //\r\n      // Retire la possibilité d'enlever la colonne.\r\n      //\r\n      if (config.features !== undefined) {\r\n         config.features.canHide = false;\r\n      }\r\n      //\r\n      // Retour de la config de la colonne.\r\n      // \r\n      $.extend(config.defaultGridColumnOptions, editionLien);\r\n      return config;\r\n   };\r\n   // \r\n   // Ajout du bouton ajouter pour une boite de dialogue \r\n   // \r\n   ig.configurerBoutonAjouterDialogue = function (config) {\r\n      var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar      \r\n      var toolbarGroup = toolbarData.toolbarFind(\"actions3\").controls;\r\n\r\n      toolbarGroup.push({\r\n         type: \"BUTTON\",\r\n         action: \"ajouter-valeur-parametre\",\r\n         iconBeforeLabel: true\r\n      });\r\n      config.toolbarData = toolbarData;\r\n      return config;\r\n   };\r\n   //\r\n   // Retire l'option d'aggrégation dans la boite option\r\n   // \r\n\r\n   //\r\n   // configuration de la barre d'outils de la grid interactive.\r\n   //   \r\n   ig.configurerBarreOutilsBoutons = function (config, boutonAnnuler, boutonSupprimer, boutonSave) {\r\n      var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar      \r\n      var toolbarGroup = toolbarData.toolbarFind(\"actions1\").controls;\r\n\r\n      /* indique si la grid on peut ajouter des données */\r\n      var boutonAjouter = false;\r\n\r\n\r\n      if (config.editable !== undefined) {\r\n         if (config.editable.allowedOperations.create === undefined) {\r\n            boutonAjouter = true;\r\n         } else {\r\n            boutonAjouter = config.editable.allowedOperations.create;\r\n         }\r\n      }\r\n\r\n      boutonAnnuler = undefined ? false : boutonAnnuler;\r\n      boutonSupprimer = undefined ? false : boutonSupprimer;\r\n      boutonSave = undefined ? false : boutonSave;\r\n\r\n      var toolbarGroupAction3 = toolbarData.toolbarFind(\"actions3\").controls;\r\n      var toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls;\r\n\r\n      var addrowAction = toolbarData.toolbarFind(\"selection-add-row\");\r\n      var saveAction = toolbarData.toolbarFind(\"save\");\r\n      //\r\n      // Sélection du nombre d'enregistrement \r\n      // \r\n      toolbarGroup.unshift({\r\n         type: \"SELECT\",\r\n         action: \"change-rows-per-page\"\r\n      });\r\n      //\r\n      // Ajout des boutons\r\n      //\r\n      if (boutonAjouter) {\r\n         //\r\n         // Retirer le bouton ajouter \"selection-add-row\" \r\n         //\r\n         addrowAction.label = \"Ajouter\";\r\n         addrowAction.icon = \"fa fa-plus\";\r\n         addrowAction.iconBeforeLabel = true;\r\n         addrowAction.hot = true;\r\n      } else {\r\n         toolbarGroupAction3.pop();\r\n      }\r\n      if (boutonSave) {\r\n         saveAction.icon = \"fa fa-table-arrow-down\";\r\n         saveAction.label = \"Enregistrer la grille\";\r\n         saveAction.iconBeforeLabel = true;\r\n         saveAction.hot = true;\r\n         toolbarGroupAction2.pop();\r\n\r\n      }\r\n      //\r\n      // Bouton Annuler modification\r\n      //\r\n      var modelBoutonAnnulerModif = {\r\n         type: \"BUTTON\",\r\n         name: \"annuler-ligne\",\r\n         label: \"Annuler\",\r\n         action: \"selection-revert\",\r\n         icon: \"fa fa-undo\",\r\n         iconBeforeLabel: true,\r\n         hot: false\r\n      };\r\n      toolbarGroupAction3.push(modelBoutonAnnulerModif);\r\n      //\r\n      // Bouton save \r\n      //\r\n      if (boutonSave) {\r\n         toolbarGroupAction3.push(saveAction);\r\n      }\r\n      //\r\n      // Bouton Supprimer\r\n      //\r\n      if (boutonSupprimer) {\r\n         var modelBoutonSupprimer = {\r\n            type: \"BUTTON\",\r\n            name: \"supprimer-ligne\",\r\n            label: \"Supprimer\",\r\n            action: \"selection-delete\",\r\n            icon: \"fa fa-trash-o\",\r\n            iconBeforeLabel: true,\r\n            hot: false\r\n         };\r\n         toolbarGroupAction3.push(modelBoutonSupprimer);\r\n      }\r\n      //\r\n      // Ajout du mode skipReadonlyCells\r\n      // \r\n      config.defaultGridViewOptions = config.defaultGridViewOptions || {};\r\n      var skipReadonlyCells = {\r\n         skipReadonlyCells: true,\r\n      };\r\n      $.extend(config.defaultGridViewOptions, skipReadonlyCells);\r\n      //\r\n      // retourne la config\r\n      //\r\n      config.toolbarData = toolbarData;\r\n      return config;\r\n   };\r\n\r\n   //\r\n   // configuration de la barre d'outils de la grid interactive.\r\n   //   \r\n   ig.configurerBarreOutilsBoutonsLecture = function (config) {\r\n      var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar      \r\n      var toolbarGroup = toolbarData.toolbarFind(\"actions1\").controls;\r\n\r\n      /* indique si la grid on peut ajouter des données */\r\n\r\n      var toolbarGroupAction3 = toolbarData.toolbarFind(\"actions3\").controls;\r\n      var toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls;\r\n      //\r\n      // Sélection du nombre d'enregistrement \r\n      // \r\n      toolbarGroup.unshift({\r\n         type: \"SELECT\",\r\n         action: \"change-rows-per-page\"\r\n      });\r\n      //\r\n      // Suppression des boutons\r\n      //      \r\n      toolbarGroupAction3.pop();\r\n      toolbarGroupAction2.shift();\r\n      toolbarGroupAction2.pop();\r\n\r\n      //\r\n      // retourne la config\r\n      //\r\n      config.toolbarData = toolbarData;\r\n      return config;\r\n   };\r\n\r\n   ig.initialiserToolbarFacetedSearch = function (config) {\r\n\r\n      var toolbarData = $.apex.interactiveGrid.copyDefaultToolbar(); // copie la toolbar\r\n      var toolbarGroupAction2 = toolbarData.toolbarFind(\"actions2\").controls;\r\n      var toolbarGroup = toolbarData.toolbarFind(\"actions1\");\r\n\r\n      toolbarData.toolbarRemove(\"actions2\");\r\n\r\n      //\r\n      // Sélection du nombre d'enregistrement \r\n      // \r\n      toolbarGroup.controls.push({\r\n         type: \"SELECT\",\r\n         action: \"change-rows-per-page\"\r\n      });\r\n\r\n      toolbarGroup.controls.push(\r\n         {\r\n            type: \"BUTTON\",\r\n            action: \"show-columns-dialog\",\r\n            iconBeforeLabel: true,\r\n            hot: true\r\n         });\r\n\r\n      toolbarGroup.controls.push(\r\n         {\r\n            type: \"BUTTON\",\r\n            action: \"show-filter-dialog\",\r\n            iconBeforeLabel: true,\r\n            hot: true\r\n         });\r\n\r\n      toolbarGroup.controls.push(\r\n         {\r\n            type: \"BUTTON\",\r\n            action: \"show-sort-dialog\",\r\n            iconBeforeLabel: true,\r\n            hot: true\r\n         });\r\n\r\n      toolbarGroup.controls.push(\r\n         {\r\n            type: \"BUTTON\",\r\n            action: \"show-aggregate-dialog\",\r\n            iconBeforeLabel: true,\r\n            hot: true\r\n         });\r\n\r\n      config.toolbarData = toolbarData;\r\n\r\n      return config;\r\n\r\n   };\r\n\r\n   ig.assignerValeurJsChangeEvent = function (elementDeclancheur, ecraserValeur) {\r\n\r\n      /* shq.ig.assignerValeurJsChangeEvent(this.triggeringElement); */\r\n\r\n      // eslint-disable-next-line no-undef\r\n      var valeur = elementDeclancheur.id === undefined ? null : $v2(elementDeclancheur.id);\r\n      ecraserValeur = ecraserValeur === undefined ? false : ecraserValeur;\r\n\r\n      switch (ecraserValeur) {\r\n         case true:\r\n            break;\r\n         case false:\r\n            // eslint-disable-next-line no-self-assign\r\n            valeur = valeur;\r\n            break;\r\n         default:\r\n            valeur = null;\r\n      }\r\n      return valeur;\r\n   };\r\n\r\n   /**\r\n    * Initialisation de la grille interactive pour mémoriser la page et la selection.\r\n    * @author Michel Lessard\r\n    * @date 2020-12-01\r\n    * @param \r\n    * @returns la fonction puiblique\r\n    */\r\n   ig.initialiserPageSelectionIg = (function () {\r\n\r\n      var gInitialPages = {}; // map regionId -> {} map view -> init info\r\n      var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n\r\n      var urlParts = window.location.search.split(\":\"),\r\n         resetPagination = urlParts[5] && urlParts[5].match(/RP/);\r\n\r\n      // Move info from the session storage into gInitialPages structure so that\r\n      // it can be used just once as the various widgets get initialized.\r\n      function _setInitInfo(store, regionId, key) {\r\n         var offset, count, info,\r\n            sel = store.getItem(key + \"LastSelection\"),\r\n            lastPage = store.getItem(key + \"LastPage\");\r\n\r\n         // never trust session/local storage - validate!\r\n         if (lastPage && lastPage.match(/\\d+:\\d+/)) {\r\n            lastPage = lastPage.split(\":\");\r\n            offset = parseInt(lastPage[0], 10);\r\n            count = parseInt(lastPage[1], 10);\r\n            info = { offset: offset, count: count };\r\n            if (sel) {\r\n               // not much validation of the selection that can be done\r\n               info.sel = sel;\r\n            }\r\n            apex.util.getNestedObject(gInitialPages, regionId)[key] = info;\r\n            apex.debug.message(C_LOG_DEBUG, '_setInitInfo:', info.offset, info.count);\r\n         }\r\n      }\r\n\r\n      /*\r\n       * At this point we don't know all the IG regions on the page because they \r\n       * haven't been inintialized yet. $(\".a-IG\") won't work yet!\r\n       * But only care if info was put in sesson storage so use info from the keys\r\n       * to get all the region ids.\r\n       */\r\n      var i, parts, len, store, regionId,\r\n         igRegions = {};\r\n\r\n      store = apex.storage.getScopedSessionStorage({ usePageId: true });\r\n      len = store.length;\r\n\r\n      for (i = 0; i < len; i++) {\r\n         parts = store.key(i).split(\".\"); // assume region id doesn't include \".\"!\r\n         igRegions[parts[3]] = 1;\r\n      }\r\n\r\n      igRegions = Object.keys(igRegions);\r\n\r\n      if (resetPagination) {\r\n         // reset pagination for each of the possible views of each IG region\r\n         igRegions.forEach(function (element) {\r\n            regionId = element;\r\n            store = apex.storage.getScopedSessionStorage({ usePageId: true, regionId: regionId });\r\n            store.removeItem(\"gridLastPage\");\r\n            store.removeItem(\"iconLastPage\");\r\n            store.removeItem(\"detailLastPage\");\r\n         });\r\n         apex.debug.message(C_LOG_DEBUG, 'resetPagination');\r\n      } else {\r\n         // prepare to restore the pagination offset for each of the possible veiws of each IG region\r\n         igRegions.forEach(function (element) {\r\n            regionId = element;\r\n            // return to remembered IG page\r\n            // store the lastPage info for when the IG view widgets are initalized\r\n            store = apex.storage.getScopedSessionStorage({ usePageId: true, regionId: regionId });\r\n            _setInitInfo(store, regionId, \"grid\");\r\n            _setInitInfo(store, regionId, \"icon\");\r\n            _setInitInfo(store, regionId, \"detail\");\r\n            apex.debug.message(C_LOG_DEBUG, 'Preparation restauration page');\r\n         });\r\n      }\r\n\r\n      /*\r\n    * Step 1\r\n    * When the page or selection changes remember it per view\r\n    * Step 2\r\n    * Store the information in browser session storage\r\n    */\r\n      ig.memoriserPageSelectionIg = function () {\r\n         //\r\n         // Bind les énements pour chaque IG.\r\n         // \r\n         var igRegionsId = {};\r\n\r\n         igRegionsId = $(\".a-IG\").map(function (index, element) { return (element.id); });\r\n\r\n         igRegionsId.map(function (index, element) {\r\n\r\n            var IgRegionId$ = '#'.concat(element);\r\n            apex.debug.message(C_LOG_DEBUG, 'Bind event gridpagechange tablemodelviewpagechange id:', IgRegionId$);\r\n\r\n            $(IgRegionId$).on(\"gridpagechange tablemodelviewpagechange\", function (event, data) {\r\n               var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n               var initInfo, sel,\r\n                  ig$ = $(this),\r\n                  regionId = this.id, // not exactly the region id but in the spirt of the regionId option of getScopedSessionStorage\r\n                  store = apex.storage.getScopedSessionStorage({ usePageId: true, regionId: regionId }),\r\n                  viewId = ig$.interactiveGrid(\"getCurrentViewId\");\r\n\r\n               if (viewId.match(/icon|grid|detail/)) {\r\n                  if (data.count === null) {\r\n                     store.setItem(viewId + \"LastPage\", data.offset + \":0\");\r\n                  }\r\n                  else {\r\n                     store.setItem(viewId + \"LastPage\", data.offset + \":\" + data.count);\r\n                  }\r\n                  // Also part of step 3 restore the selection\r\n                  initInfo = gInitialPages[regionId] && gInitialPages[regionId][viewId];\r\n                  if (initInfo && initInfo.sel) {\r\n                     sel = initInfo.sel;\r\n                     ig$.interactiveGrid(\"setSelectedRecords\", sel.split(\"|\"));\r\n                     delete initInfo.sel;\r\n                  }\r\n               }\r\n            });\r\n\r\n            apex.debug.message(C_LOG_DEBUG, 'Bind event interactivegridselectionchange id:', IgRegionId$);\r\n            $(IgRegionId$).on(\"interactivegridselectionchange\", function (event, data) {\r\n               var initInfo, sel, model,\r\n                  ig$ = $(this),\r\n                  regionId = this.id, // not exactly the region id but...\r\n                  store = apex.storage.getScopedSessionStorage({ usePageId: true, regionId: regionId }),\r\n                  view = ig$.interactiveGrid(\"getCurrentView\"),\r\n                  viewId = view.internalIdentifier;\r\n\r\n               if (viewId.match(/icon|grid/)) {\r\n                  model = view.model;\r\n                  var lastPage = store.getItem(viewId + \"LastPage\");\r\n                  initInfo = gInitialPages[regionId] && gInitialPages[regionId][viewId];\r\n                  initInfo = initInfo === undefined ? {} : initInfo;\r\n                  //\r\n                  // Équivalent du P39_SELECTION_OVERRIDE mais pour la page 1\r\n                  // \r\n                  if ($nvl(initInfo.sel === undefined ? false : initInfo.sel, false) && initInfo.offset === 0) {\r\n                     sel = initInfo.sel;\r\n                     lastPage = null;\r\n                  } else {\r\n                     sel = ig$.interactiveGrid(\"getSelectedRecords\").map(function (r) { return model.getRecordId(r); }).join(\"|\");\r\n                  }\r\n                  store.setItem(viewId + \"LastSelection\", sel);\r\n                  if (lastPage === null) {\r\n                     var nbRecPage = view.view$.grid(\"option\", \"rowsPerPage\");\r\n                     var dataEvent = { offset: 0, count: nbRecPage };\r\n                     var IgRegionId$ = '#'.concat(regionId);\r\n                     apex.event.trigger($(IgRegionId$), \"gridpagechange\", dataEvent);\r\n                  }\r\n                  apex.debug.message(C_LOG_DEBUG, \"SAVED selection change: \", regionId, viewId, sel);\r\n               }\r\n\r\n            });\r\n         });\r\n      };\r\n\r\n      /*\r\n       * Step 3\r\n       * Restore the IG page (row offset really) when IG view widgets are initalized.\r\n       * See code above for how the session store info was gathered and made available for this step.\r\n       */\r\n      /*\r\n       * The grid and tableModelView widgets just don't let you initialize them\r\n       * with a starting offset. They always start at 0. This is a problem for\r\n       * returning to a specific page. (See comments below on the first failed attempt that lead to this solution)\r\n       * Extend the widgets in-place to allow setting an initial offset\r\n       * Needs to happen after interactiveGrid and related widgets are loaded but before they are initalized\r\n       *\r\n       * Warning: using undocumented internal properties of the grid and tableModelView widgets.\r\n       */\r\n\r\n      $(function () {\r\n\r\n         $.widget(\"apex.grid\", $.apex.grid, {\r\n            refresh: function (focus) {\r\n               var regionId, initInfo;\r\n               // if this grid is in an IG view\r\n               if (this.element.hasClass(\"a-IG-gridView\")) {\r\n                  regionId = this.element.closest(\".a-IG\")[0].id; // id of IG region\r\n                  initInfo = gInitialPages[regionId] && gInitialPages[regionId].grid;\r\n\r\n                  if (initInfo && initInfo.offset) {\r\n\r\n                     this.pageOffset = initInfo.offset;\r\n                     delete initInfo.offset;\r\n                     if (this.pageOffset > 0) {\r\n                        // Workaround a failed assumption in the model that the first request\r\n                        // will be for offset 0.\r\n                        // Warning using undocumented member _data.\r\n                        var igLenght = this.model._data.length === 0 ? 1 : this.model._data.length;\r\n                        this.model._data.length = 1;\r\n                        this.model._data.length = igLenght;\r\n                     }\r\n                     apex.debug.message(C_LOG_DEBUG, \"RESTORE page offset\", regionId, \"grid\", this.pageOffset, this.pageSize, \"Sélection\", initInfo.sel);\r\n                  }\r\n               }\r\n\r\n               this._super(focus);\r\n            }\r\n         });\r\n         $.widget(\"apex.tableModelView\", $.apex.tableModelView, {\r\n            refresh: function (focus) {\r\n               var regionId, initInfo, viewId, key;\r\n\r\n               // table model view is used for both icon view and detail view so figure out which one this instance is\r\n               if (this.element.hasClass(\"a-IG-iconView\")) {\r\n                  viewId = \"icon\";\r\n               } else if (this.element.hasClass(\"a-IG-detailView\")) {\r\n                  viewId = \"detail\";\r\n               }\r\n               if (viewId) {\r\n                  key = viewId;\r\n                  regionId = this.element.closest(\".a-IG\")[0].id; // id of IG region\r\n                  initInfo = gInitialPages[regionId] && gInitialPages[regionId][key];\r\n                  if (initInfo && initInfo.offset) {\r\n                     this.pageOffset = initInfo.offset;\r\n                     delete initInfo.offset;\r\n                     if (this.pageOffset > 0) {\r\n                        // Workaround a failed assumption in the model that the first request\r\n                        // will be for offset 0.\r\n                        // Warning using undocumented member _data.\r\n                        this.model._data.length = 1;\r\n                     }\r\n                  }\r\n               }\r\n               this._super(focus);\r\n            }\r\n         });\r\n      });\r\n\r\n      // return app namespace\r\n      return {\r\n         memoriserPageSelectionIg: ig.memoriserPageSelectionIg\r\n      };\r\n   });\r\n\r\n   ig.inactiverEnteteColonne = function (config) {\r\n      config.defaultGridColumnOptions = config.defaultGridColumnOptions || {};\r\n      // \r\n      // Désactive la sélection de l'entête de colonne \r\n      //       \r\n      var noHeaderColonne = {\r\n         noHeaderActivate: true,\r\n      };\r\n\r\n      $.extend(config.defaultGridColumnOptions, noHeaderColonne);\r\n      return config;\r\n   };\r\n   /*\r\n   /   Fonction qui permet de fixer le collapsable d'un groupement \r\n   */\r\n   ig.DeactivercollapsableControlBreak = function (config) {\r\n      config.defaultGridViewOptions = {\r\n         collapsibleControlBreaks: false\r\n      };\r\n\r\n      return config;\r\n   };\r\n   /*\r\n   /  Fonction qui permet d'afficher des minutes en heures formatté 99:99\r\n   */\r\n   ig.appliquerFormatHeure = function (staticId) {\r\n\r\n      function padTo2Digits(num) {\r\n         return num.toString().padStart(2, '0');\r\n      }\r\n\r\n      apex.item.create(staticId, {\r\n         displayValueFor: function (value) {\r\n\r\n            const totalMinutes = value;\r\n            const minutes = totalMinutes % 60;\r\n            const hours = Math.floor(totalMinutes / 60);\r\n\r\n            return `${padTo2Digits(hours)}:${padTo2Digits(minutes)}`;\r\n         }\r\n      });\r\n   };\r\n})(shq.ig, shq, apex.theme42, apex.jQuery);","/* eslint-disable no-unused-vars */\r\n/* global apex */\r\n\r\n/* \r\n\r\n-  Dans l'option de la page Execute when Page Loads \r\n \r\n   shq.ig.action.asynMenugrilleShq (\"static id de la grid\" , \"Code de menu\");\r\n   \r\n   Exemple:\r\n   shq.ig.action.asynMenugrilleShq ('repertoireCode','GPR_CLIENT')\r\n     \r\n*/\r\n\r\n\r\nvar shq = shq || {};\r\nshq.ig = shq.ig || {};\r\nshq.ig.action = {};\r\n\r\n(function (actionGridMenu, apex, $) {\r\n   \"use strict\";\r\n\r\n   var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n   var C_DIESE = '#';\r\n\r\n   actionGridMenu.initialiserColoneMenu = function (options) {\r\n\r\n      options.defaultGridColumnOptions = options.defaultGridColumnOptions || {};\r\n      options.heading = options.heading || {};\r\n      options.features = options.features || {};\r\n\r\n      var optionColone = {\r\n         seq: 1,\r\n         headingAlignment: \"center\",\r\n         noStretch: true,\r\n         noHeaderActivate: true,\r\n         width: \"40px\",\r\n         canHide: false,\r\n         heading: \"\",\r\n         columnCssClasses: \"has-button\",\r\n         alignment: \"center\",\r\n         resizeColumns: false,\r\n         usedAsRowHeader: false,\r\n         canSort: false\r\n      };\r\n      var optionHeading = {\r\n         label: \"Menu enregistrement\"\r\n      };\r\n\r\n      var optionFeatures = {\r\n         canHide: false\r\n      };\r\n\r\n      $.extend(options.defaultGridColumnOptions, optionColone);\r\n      $.extend(options.heading, optionHeading);\r\n      $.extend(options.features, optionFeatures);\r\n\r\n      apex.debug.message(C_LOG_DEBUG, 'initialiserColoneMenu', optionColone);\r\n      apex.debug.message(C_LOG_DEBUG, 'initialiserColoneMenu', optionHeading);\r\n      apex.debug.message(C_LOG_DEBUG, 'initialiserColoneMenu', optionFeatures);\r\n\r\n      return options;\r\n   };\r\n\r\n   var _creerMarkupGrilleShqMenu = function (igMenuActionShq) {\r\n\r\n      var divDataMenu = $(\"<div>\");\r\n      divDataMenu.attr(\"id\", igMenuActionShq);\r\n      divDataMenu.css(\"display\", \"none\");\r\n      divDataMenu.attr(\"tabindex\", \"-1\");\r\n      divDataMenu.attr(\"role\", \"menu\");\r\n\r\n      var divBody = $(\"body\");\r\n      // divBody.append(divDataMenu);\r\n   };\r\n\r\n   var _initialiserGrid = function (pRegionStaticId) {\r\n      // Interactive Grid            \r\n      var grid = apex.region(pRegionStaticId).call('getViews', 'grid');\r\n      var gridObject = {\r\n         grid: grid,\r\n         record: null,\r\n         fields: grid.model.getOption(\"fields\"),\r\n         recordId: null\r\n      };\r\n      return gridObject;\r\n   };\r\n\r\n   var _obtenirValeurColonesIg = function (gridObject) {\r\n      var coloneGrids = [];\r\n\r\n      $.each(gridObject.fields, function (index, val) {\r\n         var coloneGrid = {\r\n            nomColone: val.property,\r\n            valeurColone: gridObject.grid.model.getRecordValue(gridObject.recordId, val.property)\r\n         };\r\n         coloneGrids.push(coloneGrid);\r\n      });\r\n      apex.debug.message(C_LOG_DEBUG, '_obtenirValeurColonesIg', coloneGrids);\r\n   };\r\n\r\n   actionGridMenu.asynMenugrilleShq = function (pRegionStaticId, pGridActionCode) {\r\n\r\n      var C_IG_ROW_ACTION = '_ig_row_actions_menu';\r\n\r\n      var igMenuActionShq = pRegionStaticId + \"_ig_row_actions_menu\",\r\n         $igMenuActionShq = \"#\" + igMenuActionShq,\r\n         $pRegionStaticId = '#'.concat(pRegionStaticId),\r\n         igBody = '.a-IG-body';\r\n\r\n      $($pRegionStaticId).on('click', '.js-menuButton', function (event) {\r\n         //\r\n         // Pas compatible ie\r\n         // var targetMenuButton = event.target.closest(\"button\");\r\n         //\r\n         var targetMenuButton = $(event.target).parent();\r\n         var record = gridObject.grid.getContextRecord(targetMenuButton)[0];\r\n\r\n         gridObject.record = record;\r\n         //\r\n         // Pas compatible ie\r\n         //gridObject.recordId = $(targetMenuButton).closest('tr').data(\"id\");\r\n         // \r\n         gridObject.recordId = $(targetMenuButton).parents(\"tr:first\").attr(\"data-id\");\r\n         // Logging\r\n         apex.debug.message(C_LOG_DEBUG, 'asynMenugrilleShq - event.target', targetMenuButton);\r\n\r\n      });\r\n\r\n      var gridObject = _initialiserGrid(pRegionStaticId);\r\n\r\n\r\n      //\r\n      //      Ce code ne fonctionne pas pour une grille en maitre-detail...la grid detail le editable est à faux.\r\n      //      Moi et Maxime on est en réflexion....\r\n      //         \r\n      //      if (gridObject.grid.model.getOption(\"editable\") === false ) {\r\n      //            _creerMarkupGrilleShqMenu(igMenuActionShq);\r\n      //         $($igMenuActionShq).menu({\r\n      //            items: [{ id: 'vide' }],\r\n      //            create: function (event, ui) {\r\n      //               apex.debug.message(C_LOG_DEBUG, \"_initialiserGrid - Create menu\", igMenuActionShq);\r\n      //            }\r\n      //         });\r\n      //      }\r\n\r\n      $($igMenuActionShq).menu(\r\n         {\r\n            asyncFetchMenu: function (menu, callback) {\r\n\r\n               var processGrilleAction = 'APX - Grille action';\r\n\r\n               console.log(gridObject.recordId);\r\n\r\n               _obtenirValeurColonesIg(gridObject);\r\n\r\n               if (!gridObject.grid.model.getRecordMetadata(gridObject.recordId).inserted) {\r\n                  var promise = apex.server.process(processGrilleAction, {\r\n                     x01: pGridActionCode,\r\n                     x02: gridObject.recordId\r\n                  });\r\n\r\n                  apex.debug.message(C_LOG_DEBUG, \"asyncFetchMenu\", pGridActionCode, gridObject.recordId);\r\n\r\n                  promise.done(function (data) {\r\n                     // \r\n                     // Suppression des items de menu SHQ pour s'assurer d'avoir les items de menu correspondant à la ligne\r\n                     // \r\n                     var nombreitemsMenu = menu.items.length;\r\n\r\n                     menu.items.slice().reverse().forEach(function (currentValue, index, arr) {\r\n                        if (currentValue.id && currentValue.id.indexOf('shq_') === 0) {\r\n                           menu.items.splice(arr.length - 1 - index, 1);\r\n                        }\r\n                     });\r\n                     // \r\n                     // Ajour des items de menu SHQ de la ligne en cours\r\n                     // \r\n                     data.items.slice().reverse().forEach(function (currentValue, index, array) {\r\n                        switch (currentValue.attr.positionType) {\r\n                           case 'TOP':\r\n                              menu.items.unshift(currentValue.item);\r\n                              break;\r\n                           default:\r\n                        }\r\n                     });\r\n\r\n                     data.items.forEach(function (currentValue, index, array) {\r\n                        switch (currentValue.attr.positionType) {\r\n                           case 'BOTTOM':\r\n                              menu.items.push(currentValue.item);\r\n                              break;\r\n                           default:\r\n                        }\r\n                     });\r\n\r\n                     // \r\n                     apex.debug.message(C_LOG_DEBUG, \"menu\", menu);\r\n                     //\r\n                     // Retour du callback\r\n                     //\r\n                     callback();\r\n                  }).fail(function (jqXHR, textStatus) {\r\n                     // handle error         \r\n                     apex.debug.error('Erreur  dans la function _obtenirGrilleShqMen Callback: ' + textStatus);\r\n                     callback(false);\r\n                  }).always(function () {\r\n                     // code that needs to run for both success and failure cases\r\n                  });\r\n               }\r\n               else {\r\n                  //\r\n                  // Simulation du code asynchrone \r\n                  // Pour un insertion d'un nouvel enregistrement on ne désire pas faire un hit au serveur.\r\n                  // \r\n                  setTimeout(function () { callback(); }, 0);\r\n               }\r\n            }\r\n         }\r\n      );\r\n   };\r\n\r\n   actionGridMenu.gridMenuAction = function () {\r\n      \r\n      const C_IG_ROW_ACTION = '_ig_row_actions_menu';\r\n      const igBody = '.a-IG-body';\r\n\r\n      $('.t-Region[data-menu-grid]').each(function (index, element) {\r\n\r\n         let gridMenu = {};\r\n         gridMenu.staticId = element.id;\r\n         gridMenu.$staticId = C_DIESE.concat(gridMenu.staticId);\r\n         gridMenu.idMenuActionshq = gridMenu.staticId.concat(C_IG_ROW_ACTION);\r\n         gridMenu.$idMenuActionshq = C_DIESE.concat(gridMenu.idMenuActionshq);\r\n         gridMenu.actionCode = $(element).data(\"menu-grid\");\r\n          \r\n         let gridObject = _initialiserGrid(gridMenu.staticId);\r\n\r\n         $(gridMenu.$staticId).on('click', '.js-menuButton', function (event) {\r\n            //\r\n            // Pas compatible ie\r\n            // var targetMenuButton = event.target.closest(\"button\");\r\n            //\r\n            \r\n            var targetMenuButton = $(event.target).parent();\r\n            var record = gridObject.grid.getContextRecord(targetMenuButton)[0];\r\n            \r\n            gridObject.record = record;\r\n            //\r\n            // Pas compatible ie\r\n            gridObject.recordId = $(targetMenuButton).closest('tr').data(\"id\");\r\n            // \r\n            //gridObject.recordId = $(targetMenuButton).parents(\"tr:first\").attr(\"data-id\");\r\n            // Logging\r\n            apex.debug.message(C_LOG_DEBUG, 'asynMenugrilleShq - event.target', targetMenuButton);\r\n         });\r\n\r\n         $(gridMenu.$idMenuActionshq).menu(\r\n            {\r\n               asyncFetchMenu: function (menu, callback) {\r\n                  \r\n                  var processGrilleAction = 'APX - Grille action';\r\n   \r\n                  console.log(gridObject.recordId);\r\n   \r\n                  _obtenirValeurColonesIg(gridObject);\r\n   \r\n                  if (!gridObject.grid.model.getRecordMetadata(gridObject.recordId).inserted) {\r\n                     var promise = apex.server.process(processGrilleAction, {\r\n                        x01: gridMenu.actionCode,\r\n                        x02: gridObject.recordId\r\n                     });\r\n   \r\n                     apex.debug.message(C_LOG_DEBUG, \"asyncFetchMenu\", gridMenu.actionCode, gridObject.recordId);\r\n   \r\n                     promise.done(function (data) {\r\n                        // \r\n                        // Suppression des items de menu SHQ pour s'assurer d'avoir les items de menu correspondant à la ligne\r\n                        // \r\n                        var nombreitemsMenu = menu.items.length;\r\n   \r\n                        menu.items.slice().reverse().forEach(function (currentValue, index, arr) {\r\n                           if (currentValue.id && currentValue.id.indexOf('shq_') === 0) {\r\n                              menu.items.splice(arr.length - 1 - index, 1);\r\n                           }\r\n                        });\r\n                        // \r\n                        // Ajour des items de menu SHQ de la ligne en cours\r\n                        // \r\n                        data.items.slice().reverse().forEach(function (currentValue, index, array) {\r\n                           switch (currentValue.attr.positionType) {\r\n                              case 'TOP':\r\n                                 menu.items.unshift(currentValue.item);\r\n                                 break;\r\n                              default:\r\n                           }\r\n                        });\r\n   \r\n                        data.items.forEach(function (currentValue, index, array) {\r\n                           switch (currentValue.attr.positionType) {\r\n                              case 'BOTTOM':\r\n                                 menu.items.push(currentValue.item);\r\n                                 break;\r\n                              default:\r\n                           }\r\n                        });\r\n   \r\n                        // \r\n                        apex.debug.message(C_LOG_DEBUG, \"menu\", menu);\r\n                        //\r\n                        // Retour du callback\r\n                        //\r\n                        callback();\r\n                     }).fail(function (jqXHR, textStatus) {\r\n                        // handle error         \r\n                        apex.debug.error('Erreur  dans la function _obtenirGrilleShqMen Callback: ' + textStatus);\r\n                        callback(false);\r\n                     }).always(function () {\r\n                        // code that needs to run for both success and failure cases\r\n                     });\r\n                  }\r\n                  else {\r\n                     //\r\n                     // Simulation du code asynchrone \r\n                     // Pour un insertion d'un nouvel enregistrement on ne désire pas faire un hit au serveur.\r\n                     // \r\n                     setTimeout(function () { callback(); }, 0);\r\n                  }\r\n               }\r\n            }\r\n         );         \r\n      });\r\n\r\n      \r\n\r\n\r\n   \r\n\r\n\r\n      //\r\n      //      Ce code ne fonctionne pas pour une grille en maitre-detail...la grid detail le editable est à faux.\r\n      //      Moi et Maxime on est en réflexion....\r\n      //         \r\n      //      if (gridObject.grid.model.getOption(\"editable\") === false ) {\r\n      //            _creerMarkupGrilleShqMenu(igMenuActionShq);\r\n      //         $($igMenuActionShq).menu({\r\n      //            items: [{ id: 'vide' }],\r\n      //            create: function (event, ui) {\r\n      //               apex.debug.message(C_LOG_DEBUG, \"_initialiserGrid - Create menu\", igMenuActionShq);\r\n      //            }\r\n      //         });\r\n      //      }\r\n\r\n      \r\n   };\r\n})(shq.ig.action, apex, apex.jQuery);","/* eslint-disable no-unused-vars */\r\n/* global apex */\r\n/* \r\n\r\n-  Dans l'option de la page Execute when Page Loads \r\n   \r\n   Exemple:\r\n\t   \r\n*/\r\nvar shq = shq || {};\r\nshq.ig = shq.ig || {};\r\nshq.ig.navgt = {};\r\n\r\n(function (igNavgt, apex, $) {\r\n\t\"use strict\";\r\n\r\n\r\n\tvar C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n\tvar diese = '#';\r\n\r\n\tvar ig = $('.shq-navgt-ig');\r\n\tvar $id = $(diese.concat(ig.attr('id')));\r\n\r\n\r\n\t$id.on(\"gridpagechange\", function (event, data) {\r\n\t\tapex.debug.info('__gridpagechange');\r\n\t\tshq.ig.navgt.enregistrerDataIg();\r\n\r\n\t});\r\n\r\n\tigNavgt.enregistrerDataIg = function () {\r\n\r\n\t\tvar selRecords;\r\n\t\tvar selRecordsJSON;\r\n\t\tvar ig = $('.shq-navgt-ig');\r\n\t\tvar PROCESS_NAME = 'APX - Enregistrer navigation';\r\n\t\tvar gridView;\r\n\t\tvar model;\r\n\t\tvar seq;\r\n\t\tvar current_seq;\r\n\r\n\t\tig.each(function (index, element) {\r\n\t\t\tif (element.hasAttribute('data-nvgt-pkeys')) {\r\n\r\n\t\t\t\tselRecords = {\r\n\t\t\t\t\t\"rows\": []\r\n\t\t\t\t};\r\n\t\t\t\tvar keys = {\r\n\r\n\t\t\t\t};\r\n\t\t\t\tvar id = element.id;\r\n\t\t\t\tapex.debug.info('__id__'.concat(id));\r\n\t\t\t\tvar $id = $(diese.concat(id));\r\n\t\t\t\tvar igKeysArr = $id.attr('data-nvgt-pkeys').split(',');\r\n\r\n\r\n\t\t\t\tvar igkeysValue = {};\r\n\t\t\t\tvar igKeysTitle;\r\n\t\t\t\tvar gridName = $id.attr('data-nvgt-gridkey');\r\n\r\n\r\n\t\t\t\tif (element.hasAttribute('data-nvgt-title')) {\r\n\t\t\t\t\tigKeysTitle = $id.attr('data-nvgt-title');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgridView = apex.region(id).widget().interactiveGrid(\"getViews\").grid;\r\n\r\n\r\n\t\t\t\tmodel = gridView.model;\r\n\t\t\t\tseq = 0;\r\n\r\n\t\t\t\tmodel.forEach(function (element) {\r\n\t\t\t\t\tigkeysValue = {};\r\n\t\t\t\t\tfor (var k = 0; k < igKeysArr.length; k++)\r\n\t\t\t\t\t\tigkeysValue[igKeysArr[k]] = model.getValue(element, igKeysArr[k]);\r\n\r\n\t\t\t\t\tvar igTitle = igKeysTitle !== undefined ? model.getValue(element, igKeysTitle) : \"\";\r\n\r\n\t\t\t\t\tseq++;\r\n\r\n\t\t\t\t\tselRecords.rows.push({\r\n\t\t\t\t\t\t\"seq\": seq,\r\n\t\t\t\t\t\t'keys': igkeysValue,\r\n\t\t\t\t\t\t'title': igTitle\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\tselRecordsJSON = JSON.stringify(selRecords);\r\n\r\n\t\t\t\tvar promise = apex.server.process(PROCESS_NAME, {\r\n\t\t\t\t\tx01: selRecordsJSON,\r\n\t\t\t\t\tx02: gridName,\r\n\t\t\t\t\tx03: igKeysArr.join(':')\r\n\t\t\t\t}, {\r\n\t\t\t\t\tsuccess: function (pData) {\r\n\t\t\t\t\t\tapex.debug.info('__success__'.concat(PROCESS_NAME));\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t};\r\n\r\n\r\n\r\n})(shq.ig.navgt, apex, apex.jQuery);","/* global apex */\r\n\r\n//const { validate } = require(\"json-schema\");\r\n\r\nvar shq = shq || {};\r\nshq.ig_selection = {};\r\n\r\n(function (ig_selection, shq, ut, $) {\r\n    \"use strict\";\r\n    var diese = '#';\r\n    var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n\r\n    ig_selection.assignerItemsIgSelectionne = function (colonneClef, collectionApex, data, modelIg) {\r\n\r\n\r\n        var i, elements = [];\r\n        var value;\r\n        var id = data.model.getOption(\"regionStaticId\");\r\n        var view = apex.region(id).call(\"getCurrentView\");\r\n\r\n\r\n        if (view.singleRowMode) {\r\n            return;\r\n        }\r\n\r\n        for (i = 0; i < data.selectedRecords.length; i++) {\r\n            value = modelIg.getValue(data.selectedRecords[i], colonneClef);\r\n            if (elements.indexOf(value)) {\r\n                elements.push(value);\r\n            }\r\n        }\r\n\r\n        var result = apex.server.process(\"ENREGISTRER_SELECTION_IG\", {\r\n            f01: elements,\r\n            x01: collectionApex\r\n        });\r\n\r\n        apex.message.clearErrors();\r\n        result.done(function (data) {\r\n            var message = apex.lang.formatMessage('APEX.GV.SELECTION_COUNT',elements.length);\r\n            apex.debug.info(message);\r\n        }).fail(function (jqXHR, textStatus, errorThrown) {\r\n            var message = apex.lang.getMessage('SHQ.ERREUR.SELECTION_ENREGISTREMENT');\r\n            \r\n            apex.message.showErrors([\r\n                {\r\n                    type: \"error\",\r\n                    location: \"page\",\r\n                    message: message,\r\n                    unsafe: false\r\n                }\r\n            ]);\r\n        });\r\n    };\r\n\r\n    ig_selection.enregistrementSelectione = function (data) {\r\n\r\n        var id = data.model.getOption(\"regionStaticId\");\r\n        var view = apex.region(id).call(\"getCurrentView\");\r\n        \r\n        var selectionne = false;\r\n        \r\n\r\n        if (view.singleRowMode) {\r\n            return;\r\n        }    \r\n\r\n        /*\r\n        if (view.view$.grid(\"inEditMode\") && nbRecordSelected > 0) {\r\n            return;\r\n        }\r\n        */\r\n\r\n        var nbRecordSelected = data.selectedRecords === undefined ? 0 : data.selectedRecords.length;\r\n        selectionne = nbRecordSelected === 0 ? false : true;        \r\n        \r\n        return selectionne;\r\n        \r\n    };\r\n\r\n})(shq.ig_selection, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n/* global moment */\r\nvar shq = shq || {};\r\nshq.item = {};\r\n\r\n(function (item, shq, ut, $) {\r\n   \"use strict\";\r\n   //\r\n   var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n   var diese = '#';\r\n   //\r\n   // Utiliser cette fonction à la place de repeat car pas supporté dans IE...c'est vraiment un cancer celui-là\r\n   //\r\n   function repeatStringNumTimes(string, times) {\r\n      var repeatedString = \"\";\r\n      while (times > 0) {\r\n         repeatedString += string;\r\n         times--;\r\n      }\r\n      return repeatedString;\r\n   }\r\n\r\n   item.appliquerMasque = function () {\r\n      shq.item.appliquerMasqueTelephone();\r\n      shq.item.appliquerMasqueCourriel();\r\n      shq.item.appliquerMasqueDate();\r\n      shq.item.appliquerMasqueHeure();\r\n      shq.item.appliquerMasqueCodePostal();\r\n      shq.item.appliquerMasqueCodeDebutAlpha();\r\n      shq.item.appliquerMasqueCodeAlphaNum();\r\n      shq.item.appliquerMasqueCodeNum();\r\n      shq.item.appliquerMasqueCodeAlpha();\r\n      shq.item.appliquerMasqueTvq();\r\n      shq.item.appliquerMasqueTps();\r\n      shq.item.appliquerMasqueMontantAucuneDecimal();\r\n      shq.item.appliquerMasqueMontantDeuxDecimal();\r\n      shq.item.appliquerMasquePourcentage();\r\n      shq.item.appliquerMasquePourcentageSansSigne();\r\n      shq.item.appliquerMasqueNumeriqueDeuxDecimales();\r\n      shq.item.appliquerMasqueNumeriqueSansDecimal();\r\n   };\r\n   //\r\n   //\r\n   //\r\n   item.validerDate = function (dateItem) {\r\n      var item$ = $(diese.concat(dateItem));\r\n      var l_dateFormat = 'YYYY-MM-DD';\r\n      var l_dateValue = item$.val();\r\n      // Valide la date \r\n      return moment(l_dateValue, l_dateFormat, true).isValid();\r\n   };\r\n   //\r\n   // Applique le masque heure \r\n   //\r\n   item.appliquerMasqueHeure = function (listeItems) {\r\n\r\n      var l_item;\r\n\r\n      var DEBUTAM = 'DAM',\r\n         DEBUTPM = 'DPM',\r\n         FINAM = 'FAM',\r\n         FINPM = 'FPM',\r\n         HEUREPLUSUNEJOURNEE = 'HPUJ',\r\n         HEUREPLUSUNEJOURNEENEGATIVE = 'HPUJNEG',\r\n         HEUREPLUSUNEJOURNEEACTIVITE = 'HAUJ',\r\n         HEUREPLUSUNEJOURNEENEGATIVEACTIVITE = 'HAUJNEG',\r\n         NEGATIVE = 'HNEG';\r\n\r\n\r\n\r\n      var completerHeureSaisie = function (heure) {\r\n         //\r\n         //  Formatteur la partir heure, \"padder\" à gauche avec un zéro\r\n         // \r\n         apex.debug.message(C_LOG_DEBUG, 'Fomatter Heure');\r\n\r\n         var ArrayHeure = heure.split(':');\r\n\r\n         if (ArrayHeure.length === 2) {\r\n\r\n            apex.debug.message(C_LOG_DEBUG, 'Entre dans le if length 2');\r\n\r\n            if ((/[1-2]/).test(ArrayHeure[0].length) && ArrayHeure[1].length === 2) {\r\n\r\n               apex.debug.message(C_LOG_DEBUG, 'Entre dans le if mettre 0');\r\n\r\n               var valeurHeure = ArrayHeure[0];\r\n\r\n               var partieHeure;\r\n\r\n               switch (valeurHeure.length) {\r\n                  case 1:\r\n                     partieHeure = '0';\r\n                     break;\r\n\r\n                  case 2:\r\n                     if (/^-/.test(valeurHeure)) {\r\n                        partieHeure = '-0';\r\n                     } else if (/^0/.test(valeurHeure)) {\r\n                        partieHeure = '0';\r\n                     } else {\r\n                        partieHeure = valeurHeure;\r\n                     }\r\n                     break;\r\n                  default:\r\n                     partieHeure = valeurHeure;\r\n               }\r\n\r\n               var valeurMinutes = ArrayHeure[1];\r\n\r\n               valeurHeure = valeurHeure.replace(/^(-0|0|-)/, '');\r\n               partieHeure = valeurHeure.length === 1 ? partieHeure + valeurHeure : partieHeure;\r\n               heure = partieHeure.concat(':' + valeurMinutes);\r\n\r\n               apex.debug.message(C_LOG_DEBUG, 'valeurHeure heureComplete : ' + heure);\r\n            }\r\n         }\r\n\r\n         return heure;\r\n      };\r\n\r\n      var shqHeureTranslation = {\r\n\r\n         \"A\": { pattern: /[0-2]/, optional: true },\r\n         \"B\": { pattern: /[0-9]/, optional: false },\r\n         \"C\": { pattern: /[0-5]/, optional: false },\r\n         \"D\": { pattern: /[0-9]/, optional: false },\r\n         \"E\": { pattern: /[0-3]/, optional: false },\r\n         \"F\": { pattern: /[0-2]/, optional: false },\r\n         \"G\": { pattern: /[1-9]/, optional: false },\r\n         \"H\": { pattern: /[0-1]/, optional: false },\r\n         \"I\": { pattern: /[2-9]/, optional: false },\r\n         \"J\": { pattern: /[0-9]/, optional: true },\r\n         \"K\": { pattern: /[7-9]/, optional: false },\r\n         \"M\": { pattern: /-/, optional: true },\r\n         \"N\": { pattern: /[0-3]/, optional: true },\r\n         \"O\": { pattern: /[0-9]/, optional: true }\r\n      };\r\n\r\n      var SPMaskBehavior = function (val) {\r\n         apex.debug.message(C_LOG_DEBUG, 'SPMaskBehavior', val);\r\n         return val.replace(/\\D/g, '')[0] === '2' ? 'AE:CD' : 'AB:CD';\r\n      },\r\n         SPMaskBehaviorNegative = function (val) {\r\n            apex.debug.message(C_LOG_DEBUG, 'SPMaskBehaviorNegative', val);\r\n            return val.replace(/\\D/g, '')[0] === '2' ? 'MAN:CD' : 'MAO:CD';\r\n         },\r\n         spOptions = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               field.mask(SPMaskBehavior.apply({}, arguments), options);\r\n               var valArray = val.split(\":\");\r\n               if (valArray.length == 2) {\r\n                  field.val(completerHeureSaisie(val));\r\n               }\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         },\r\n         spOptionsNegative = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               field.mask(SPMaskBehaviorNegative.apply({}, arguments), options);\r\n               var valArray = val.split(\":\");\r\n               if (valArray.length == 2) {\r\n                  field.val(completerHeureSaisie(val));\r\n               }\r\n            },\r\n            onChange: function (value, e) {\r\n               e.target.value = value.replace(/(?!^)-/g, '')\r\n                  .replace(/^(-[:])/, '-')\r\n                  .replace(/(\\d+\\:*)\\:(\\d{2})$/, \"$1:$2\");\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         },\r\n         shqMaskPlusUneJournee = function (val) {\r\n            var mask = 'JJ:CD';\r\n            apex.debug.message(C_LOG_DEBUG, 'shqMaskPlusUneJournee', val);\r\n            return mask;\r\n         },\r\n         spOptionsPlusUneJournee = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               //\r\n               // Applique le masque de saisie\r\n               // \r\n               field.mask(shqMaskPlusUneJournee.apply({}, arguments), options);\r\n               var valArray = val.split(\":\");\r\n\r\n               switch (valArray.length) {\r\n                  case 2:\r\n                     field.val(completerHeureSaisie(val));\r\n                     break;\r\n               }\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         },\r\n         shqMaskPlusUneJourneeNegative = function (val) {\r\n            apex.debug.message(C_LOG_DEBUG, 'shqMaskPlusUneJourneeNegative', val);\r\n            var mask = 'MJJ:CD';\r\n            return mask;\r\n\r\n         },\r\n         spOptionsPlusUneJourneeNegative = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               //\r\n               // Applique le masque de saisie\r\n               // \r\n               field.mask(shqMaskPlusUneJourneeNegative.apply({}, arguments), options);\r\n               var valArray = val.split(\":\");\r\n\r\n               switch (valArray.length) {\r\n                  case 2:\r\n                     field.val(completerHeureSaisie(val));\r\n                     break;\r\n               }\r\n            },\r\n            onChange: function (value, e) {\r\n               e.target.value = value.replace(/(?!^)-/g, '')\r\n                  .replace(/^(-[:])/, '-')\r\n                  .replace(/(\\d+\\:*)\\:(\\d{2})$/, \"$1:$2\");\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         },\r\n         /* 3 positions */\r\n         shqMaskPlusUneJourneeActivite = function (val) {\r\n            var mask = 'JJJ:CD';\r\n            apex.debug.message(C_LOG_DEBUG, 'shqMaskPlusUneJourneeActivite', val);\r\n            return mask;\r\n         },\r\n         spOptionsPlusUneJourneeActivite = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               //\r\n               // Applique le masque de saisie\r\n               // \r\n               field.mask(shqMaskPlusUneJourneeActivite.apply({}, arguments), options);\r\n               var valArray = val.split(\":\");\r\n\r\n               switch (valArray.length) {\r\n                  case 2:\r\n                     field.val(completerHeureSaisie(val));\r\n                     break;\r\n               }\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         },\r\n         shqMaskPlusUneJourneeNegativeActivite = function (val) {\r\n            apex.debug.message(C_LOG_DEBUG, 'shqMaskPlusUneJourneeNegativeActivite', val);\r\n            var mask = 'MJJJ:CD';\r\n            return mask;\r\n\r\n         },\r\n         spOptionsPlusUneJourneeNegativeActivite = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               //\r\n               // Applique le masque de saisie\r\n               // \r\n               field.mask(shqMaskPlusUneJourneeNegativeActivite.apply({}, arguments), options);\r\n               var valArray = val.split(\":\");\r\n\r\n               switch (valArray.length) {\r\n                  case 2:\r\n                     field.val(completerHeureSaisie(val));\r\n                     break;\r\n               }\r\n            },\r\n            onChange: function (value, e) {\r\n               e.target.value = value.replace(/(?!^)-/g, '')\r\n                  .replace(/^(-[:])/, '-')\r\n                  .replace(/(\\d+\\:*)\\:(\\d{2})$/, \"$1:$2\");\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         },\r\n         /* Fin 3 positions */\r\n         shqMaskAm = function (val) {\r\n\r\n            apex.debug.message(C_LOG_DEBUG, 'shqMaskDebutAm', val);\r\n            var valeur = val.replace(/\\D/g, '').split(\":\")[0];\r\n            var mask;\r\n\r\n            if (/^13/g.test(valeur)) {\r\n               mask = 'H3:HC';\r\n            } else if (/^1/.test(valeur)) {\r\n               mask = 'HE:CD';\r\n            } else if (/^0|[^[0-1]]/.test(valeur)) {\r\n               mask = 'AK:CD';\r\n            } else {\r\n               mask = 'AD:CD';\r\n            }\r\n            return mask;\r\n         },\r\n         spOptionsShqHeureAm = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               //\r\n               // Appliquer le masque de saisie\r\n               //\r\n               field.mask(shqMaskAm.apply({}, arguments), options);\r\n               // \r\n               // Valider la saisie DEBUTAM\r\n               // \r\n               var valArray = val.split(\":\");\r\n\r\n\r\n               switch (valArray.length) {\r\n                  case 1:\r\n                     var heureAm = valArray.slice(0, 2).join(\"\");\r\n                     apex.debug.message(C_LOG_DEBUG, 'heureDebutAm', heureAm);\r\n                     if (/^[7-9]/.test(heureAm)) {\r\n                        field.val(completerHeureSaisie(val));\r\n                     } else if (!(/^[0-1]/.test(heureAm))) {\r\n                        field.val(\"\");\r\n                     }\r\n                     break;\r\n                  case 2:\r\n                     field.val(completerHeureSaisie(val));\r\n                     break;\r\n               }\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         },\r\n         shqMaskPm = function (val) {\r\n            apex.debug.message(C_LOG_DEBUG, 'shqMaskPm', val);\r\n            var valeur = val.replace(/\\D/g, '').split(\"\");\r\n            var heure;\r\n            var mask;\r\n\r\n            switch (valeur.length) {\r\n               case 1:\r\n                  heure = parseInt(valeur.slice(0, 1).join(\"\"));\r\n                  break;\r\n               case 2:\r\n                  heure = parseInt(valeur.slice(0, 2).join(\"\"));\r\n                  break;\r\n\r\n            }\r\n            switch (true) {\r\n               case heure === 1:\r\n                  mask = 'GI:CD';\r\n                  break;\r\n               case heure === 2 || heure > 19:\r\n                  mask = 'FE:CD';\r\n                  break;\r\n               default:\r\n                  mask = 'FD:CD';\r\n            }\r\n            return mask;\r\n         },\r\n         spOptionsShqHeurePm = {\r\n            onKeyPress: function (val, e, field, options) {\r\n               //\r\n               // Appliquer le masque de saisie\r\n               //\r\n               field.mask(shqMaskPm.apply({}, arguments), options);\r\n               // \r\n               // Valider la saisie DEBUTAM\r\n               // \r\n\r\n               var valArray = val.split(\":\");\r\n               var PATTERNHEUREPM = /^([1][2-9]|2[0-3])$/;\r\n\r\n               switch (valArray.length) {\r\n                  case 1:\r\n                     var heurePm = valArray.slice(0, 2).join(\"\");\r\n                     apex.debug.message(C_LOG_DEBUG, 'heurePm', heurePm);\r\n                     if (!PATTERNHEUREPM.test(heurePm) && heurePm.length === 2) {\r\n                        field.val(\"\");\r\n                     }\r\n                     break;\r\n                  case 2:\r\n                     field.val(completerHeureSaisie(val));\r\n               }\r\n            },\r\n            translation: shqHeureTranslation,\r\n            recursive: true\r\n         };\r\n\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-heure').each(function (i, val) {\r\n\r\n            l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            //\r\n            // Obtenir le data attribut sur l'item\r\n            // \r\n            var indicateurHeure = $(item$).attr('data-heure');\r\n            //\r\n            //  Application du masque\r\n            //     \r\n            switch (indicateurHeure) {\r\n               case DEBUTAM:\r\n                  $(diese.concat(val.id)).mask(shqMaskAm, spOptionsShqHeureAm);\r\n                  break;\r\n               case FINAM:\r\n                  $(diese.concat(val.id)).mask(shqMaskAm, spOptionsShqHeureAm);\r\n                  break;\r\n               case DEBUTPM:\r\n                  $(diese.concat(val.id)).mask(shqMaskPm, spOptionsShqHeurePm);\r\n                  break;\r\n               case FINPM:\r\n                  $(diese.concat(val.id)).mask(shqMaskPm, spOptionsShqHeurePm);\r\n                  break;\r\n               case HEUREPLUSUNEJOURNEE:\r\n                  $(diese.concat(val.id)).mask(shqMaskPlusUneJournee, spOptionsPlusUneJournee);\r\n                  break;\r\n               case HEUREPLUSUNEJOURNEENEGATIVE:\r\n                  $(diese.concat(val.id)).mask(shqMaskPlusUneJourneeNegative, spOptionsPlusUneJourneeNegative);\r\n                  break;\r\n               case HEUREPLUSUNEJOURNEEACTIVITE:\r\n                  $(diese.concat(val.id)).mask(shqMaskPlusUneJourneeActivite, spOptionsPlusUneJourneeActivite);\r\n                  break;\r\n               case HEUREPLUSUNEJOURNEENEGATIVEACTIVITE:\r\n                  $(diese.concat(val.id)).mask(shqMaskPlusUneJourneeNegativeActivite, spOptionsPlusUneJourneeNegativeActivite);\r\n                  break;\r\n               case NEGATIVE:\r\n                  $(diese.concat(val.id)).mask(SPMaskBehaviorNegative, spOptionsNegative);\r\n                  break;\r\n\r\n               default:\r\n                  $(diese.concat(val.id)).mask(SPMaskBehavior, spOptions);\r\n            }\r\n\r\n            //\r\n            // Application de la validation generale d'une heure de saisie HTML5\r\n            // \r\n            var l_regexp;\r\n            if (indicateurHeure == HEUREPLUSUNEJOURNEE) {\r\n               l_regexp = new RegExp(/^([0-9][0-9]):[0-5][0-9]$/);\r\n            } else if (indicateurHeure === HEUREPLUSUNEJOURNEENEGATIVE) {\r\n               l_regexp = new RegExp(/^-?([0-9][0-9]):[0-5][0-9]$/);\r\n            } else if (indicateurHeure == HEUREPLUSUNEJOURNEEACTIVITE) {\r\n               l_regexp = new RegExp(/^([0-9]?[0-9][0-9]):[0-5][0-9]$/);\r\n            } else if (indicateurHeure === NEGATIVE) {\r\n               l_regexp = new RegExp(/^-?([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/);\r\n            } else if (indicateurHeure === HEUREPLUSUNEJOURNEENEGATIVEACTIVITE) {\r\n               l_regexp = new RegExp(/^-?([0-9]?[0-9][0-9]):[0-5][0-9]$/);\r\n            } else {\r\n               l_regexp = new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/);\r\n            }\r\n\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.HEURE_INVALID\");\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurTel = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurTel).mask(l_maskHeure);\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Applique le masque code postal\r\n   //\r\n   item.appliquerMasqueCodePostal = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      var l_maskCodePostal = \"S0S 0S0\";\r\n      var optionsMask = {\r\n         onKeyPress: function (value, event) {\r\n            event.currentTarget.value = value.toUpperCase();\r\n         }\r\n      };\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-code-postal').each(function (i, val) {\r\n            $(diese.concat(val.id)).mask(l_maskCodePostal, optionsMask);\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var itemLabel$ = $(diese.concat(l_item.concat('_LABEL')));\r\n            var l_regexp = new RegExp(/[A-Za-z][0-9][A-Za-z] [0-9][A-Za-z][0-9]/);\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.CODE_POSTAL_INVALID\");\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurTel = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurTel).mask(l_maskCodePostal);\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Applique le masque date\r\n   //\r\n   item.appliquerMasqueDate = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      var l_maskDate = \"0000-00-00\";\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-date').each(function (i, val) {\r\n            $(diese.concat(val.id)).mask(l_maskDate);\r\n            var l_dateFormat = 'AAAA-MM-JJ';\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var l_itemDateFormat = item$.attr('placeholder') ? item$.attr('placeholder') : l_dateFormat;\r\n            var itemLabel$ = $(diese.concat(l_item.concat('_LABEL')));\r\n            var l_regexp = new RegExp(/(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))/);\r\n            var l_message = apex.lang.formatMessage(\"APEX.DATEPICKER_VALUE_INVALID\", l_itemDateFormat).replace('#LABEL#', itemLabel$.text());\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurDate = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurDate).mask(l_maskDate);\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Applique le masque téléphonique \r\n   //\r\n   item.appliquerMasqueTelephone = function (listeItems) {\r\n      var l_mask_phone = '000 000-0000';\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-telephone').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var itemLabel$ = $(diese.concat(l_item.concat('_LABEL')));\r\n            var l_regexp = new RegExp(/\\d{3} \\d{3}[\\-]\\d{4}/);\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.PHONENUMBER_INVALID\", l_mask_phone).replace('#LABEL#', itemLabel$.text());\r\n\r\n            item$.mask(l_mask_phone);\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurTel = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurTel).mask(l_mask_phone);\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Applique le masque pour la saisie d'un courriel  \r\n   // \r\n   item.appliquerMasqueCourriel = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-courriel').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var itemLabel$ = $(diese.concat(l_item.concat('_LABEL')));\r\n            var l_regexp = new RegExp(/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/);\r\n\r\n            item$.mask('A', {\r\n               translation: {\r\n                  'A': { pattern: /[\\w@\\-.+]/, recursive: true }\r\n               }\r\n            });\r\n\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.COURRIEL_INVALID\").replace('#LABEL#', itemLabel$.text());\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurCourriel = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurCourriel).mask('A', {\r\n               translation: {\r\n                  'A': { pattern: /[\\w@\\-.+]/, recursive: true }\r\n               }\r\n            });\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Appliquer le masque pour la saisie Aucune décimal\r\n   // \r\n   /*\r\n     Options format monétaire\r\n  */\r\n   var MoneyOpts = {\r\n      reverse: true,\r\n      maxlength: false,\r\n      placeholder: '0,00',\r\n      onKeyPress: function (v, ev, curField, opts) {\r\n         var mask = curField.data('mask').mask;\r\n         var decimalSep = (/0(.)00/gi).exec(mask)[1] || ',';\r\n         if (curField.data('mask-isZero') && curField.data('mask-keycode') == 8)\r\n            $(curField).val('');\r\n         else if (v) {\r\n            // remove previously added stuff at start of string\r\n            v = v.replace(new RegExp('^0*\\\\' + decimalSep + '?0*'), ''); //v = v.replace(/^0*,?0*/, '');\r\n            v = v.length == 0 ? '0' + decimalSep + '00' : (v.length == 1 ? '0' + decimalSep + '0' + v : (v.length == 2 ? '0' + decimalSep + v : v));\r\n            $(curField).val(v).data('mask-isZero', (v == '0' + decimalSep + '00'));\r\n         }\r\n      }\r\n   };\r\n\r\n   item.appliquerMasqueMontantAucuneDecimal = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-montant-aucune-decimal').each(function (i, val) {\r\n            $(diese.concat(val.id)).mask(\" 00 000 000\", { reverse: true });\r\n         });\r\n      } else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurMontant = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurMontant).mask(\" 00 000 000\", { reverse: true });\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Appliquer le masque pour la saisie deux décimales\r\n   // \r\n   item.appliquerMasqueMontantDeuxDecimal = function (listeItems) {\r\n\r\n      /* \r\n      * à compléter et valider pour les nombre ngatif \r\n      * \r\n     \r\n\r\n      var sOptions = {\r\n         reverse: true,\r\n         translation: {\r\n            'S': {\r\n               pattern: /-|\\d/,\r\n               optional: true,\r\n               recursive: true\r\n            }\r\n         },\r\n         onChange: function (value, e) {\r\n\r\n            var target = e.target,\r\n               position = target.selectionStart; // Capture initial position\r\n\r\n            target.value = value.replace(/(?!^)-/g, '').replace(/^,/, '').replace(/^-(,| )/, '-');\r\n            target.selectionEnd = position; // Set the cursor back to the initial position.\r\n         }\r\n      };\r\n */\r\n      // Mascara para Dinheiro e Decimais com Prefixo e Sinal negativo\r\n      // Font base: https://github.com/igorescobar/jQuery-Mask-Plugin/issues/670 point to http://jsfiddle.net/c6qj0e3u/15/\r\n      // Edited by: Pyetro\r\n      // New feature: Check if field value is \"0,00\" and Backspace was pressed, so clean Val\r\n      // Accept decimals \".\" or \",\"\r\n      var MoneyOptsMinus = {\r\n         reverse: true,\r\n         maxlength: false,\r\n         placeholder: '0,00',\r\n         byPassKeys: [9, 16, 17, 18, 35, 36, 37, 38, 39, 40, 46, 91],\r\n         eventNeedChanged: false,\r\n         onKeyPress: function (v, ev, curField, opts) {\r\n            var mask = curField.data('mask').mask;\r\n            var decimalSep = (/0(.)00/gi).exec(mask)[1] || ',';\r\n\r\n            opts.prefixMoney = typeof (opts.prefixMoney) != 'undefined' ? opts.prefixMoney : '';\r\n\r\n            if (curField.data('mask-isZero') && curField.data('mask-keycode') == 8)\r\n               $(curField).val('');\r\n            else if (v) {\r\n               var key = curField.data('mask-key');\r\n               var minus = (typeof (curField.data('mask-minus-signal')) == 'undefined' ? false : curField.data('mask-minus-signal'));\r\n\r\n               if (['-', '+'].indexOf(key) >= 0) {\r\n                  curField.val((opts.prefixMoney) + (key == '-' ? key + v : v.replace(/^-?/, '')));\r\n                  curField.data('mask-minus-signal', key == '-');\r\n                  return;\r\n               }\r\n\r\n               // remove previously added stuff at start of string\r\n               v = v.replace(new RegExp('^-?'), '');\r\n               v = v.replace(new RegExp('^0*\\\\' + decimalSep + '?0*'), ''); //v = v.replace(/^0*,?0*/, '');\r\n               v = v.length == 0 ? '0' + decimalSep + '00' : (v.length == 1 ? '0' + decimalSep + '0' + v : (v.length == 2 ? '0' + decimalSep + v : v));\r\n               curField.val((opts.prefixMoney) + (minus ? '-' : '') + v).data('mask-isZero', (v == '0' + decimalSep + '00'));\r\n            }\r\n         }\r\n      };\r\n\r\n      var MoneyOptsPrefix = {};\r\n      MoneyOptsPrefix = $.extend(true, {}, MoneyOptsPrefix, MoneyOptsMinus);\r\n      MoneyOptsPrefix.prefixMoney = 'R$ ';\r\n\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-montant-deux-decimal').each(function (i, val) {\r\n            //$(diese.concat(val.id)).mask(\"#.##0,00\", MoneyOptsMinus).keydown().keyup();\r\n            $(diese.concat(val.id)).mask(\"#.##0,00\", {reverse: true});\r\n         });\r\n      } else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurMontant = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurMontant).mask(\"#.##0,00\", MoneyOptsMinus).keydown().keyup();\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Appliquer le masque pour la saisie de pourcentage\r\n   // \r\n   item.appliquerMasquePourcentage = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-pourcentage').each(function (i, val) {\r\n            $(diese.concat(val.id)).mask(\"##0,00%\", { reverse: true });\r\n         });\r\n      } else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurPourcent = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurPourcent).mask(\"##0,00%\", { reverse: true });\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Appliquer le masque pour la saisie de pourcentage sans signe %\r\n   // \r\n   item.appliquerMasquePourcentageSansSigne = function (listeItems) {\r\n      var sOptions = {\r\n         reverse: true\r\n      };\r\n\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-pourcentage-sans-signe').each(function (i, val) {\r\n            $(diese.concat(val.id)).mask(\"##0,00\", sOptions);\r\n         });\r\n      } else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurPourcent = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurPourcent).mask(\"##0,00\", sOptions);\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Appliquer le masque pour le numerique 2 décimales\r\n   // \r\n   item.appliquerMasqueNumeriqueDeuxDecimales = function (listeItems) {\r\n\r\n      var sOptions = {\r\n         reverse: true,\r\n         translation: {\r\n            'S': {\r\n               pattern: /-|\\d/,\r\n               recursive: true\r\n            }\r\n         },\r\n         onChange: function (value, e) {\r\n            var target = e.target,\r\n               position = target.selectionStart; // Capture initial position\r\n\r\n            target.value = value.replace(/(?!^)-/g, '').replace(/^,/, '').replace(/^-(,| )/, '-');\r\n\r\n            target.selectionEnd = position;\r\n         }\r\n      };\r\n\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-numerique-2d').each(function (i, val) {\r\n            $(diese.concat(val.id)).mask(\" 00 000 000 009,99\", sOptions);\r\n         });\r\n      } else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurPourcent = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurPourcent).mask(\" 00 000 000 009,99\", sOptions);\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Appliquer le masque pour le numerique aucune decimal\r\n   // \r\n   item.appliquerMasqueNumeriqueSansDecimal = function (listeItems) {\r\n\r\n      var sOptions = {\r\n         reverse: true,\r\n         translation: {\r\n            'S': {\r\n               pattern: /-|\\d/,\r\n               recursive: false\r\n            }\r\n         },\r\n         onChange: function (value, e) {\r\n            var target = e.target,\r\n               position = target.selectionStart; // Capture initial position\r\n\r\n            target.value = value.replace(/(?!^)-/g, '').replace(/^,/, '').replace(/^-(,| )/, '-');\r\n\r\n            target.selectionEnd = position;\r\n         }\r\n      };\r\n\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n      if (listeItems.length === 0) {\r\n         $('.shq-numerique-sans-decimal').each(function (i, val) {\r\n            $(diese.concat(val.id)).mask(\" 00 000 000 009\", sOptions);\r\n         });\r\n      } else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteurPourcent = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            $(selecteurPourcent).mask(\" 00 000 000 009\", sOptions);\r\n         });\r\n      }\r\n   };\r\n   //\r\n   // Permet de changer le libellé d'un item APEX\r\n   // \r\n   item.changerLibelle = function (nomItemApex, nouveauLiblle) {\r\n      var selecteurLibelle = nomItemApex.concat('_LABEL');\r\n      selecteurLibelle = selecteurLibelle.indexOf(diese, 0) === -1 ? diese.concat(selecteurLibelle) : selecteurLibelle;\r\n      if (selecteurLibelle !== undefined) {\r\n         $(selecteurLibelle).text(nouveauLiblle);\r\n      } else {\r\n         apex.debug.log('Impossible de changer le libellé ', nomItemApex);\r\n      }\r\n   };\r\n   //\r\n   // Uppercase \r\n   // \r\n   item.appliquerMajuscule = function (document) {\r\n      $(document).on('change', '.shq-uppercase', function (event) {\r\n         var eventTarget = event.target;\r\n         var elementJqApex = \"#\" + $(eventTarget).attr(\"id\");\r\n         $(elementJqApex).val($(elementJqApex).val().toUpperCase());\r\n      });\r\n   };\r\n\r\n   // Applique le masque pour le format de code suivant : Premier caractère -> majuscule, caractères suivants -> chiffres, majuscules, _, -\r\n   item.appliquerMasqueCodeDebutAlpha = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n\r\n      var optionsMask = {\r\n         translation: {\r\n            'Z': {\r\n               pattern: /[A-Za-z]+/,\r\n               recursive: true\r\n            },\r\n            '0': {\r\n               pattern: /[A-Za-z0-9_\\-]+/,\r\n               recursive: true\r\n            }\r\n         },\r\n         onKeyPress: function (value, event) {\r\n            event.currentTarget.value = value.toUpperCase();\r\n         }\r\n      };\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-code-debut-alpha').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var l_regexp = new RegExp('[A-Z]+[A-Z0-9_\\-]*');\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.CODE_DEBUT_ALPHA_INVALID\");\r\n\r\n            item$.mask('Z' + repeatStringNumTimes('0', item$[0].maxLength - 1), optionsMask);\r\n            //item$.mask('Z' + '0'.repeat(item$[0].maxLength - 1), optionsMask);\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteur = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            var item$ = $(selecteur);\r\n            item$.mask('Z' + repeatStringNumTimes('0', item$[0].maxLength - 1), optionsMask);\r\n            // item$.mask('Z' + '0'.repeat(item$[0].maxLength - 1), optionsMask);\r\n         });\r\n      }\r\n   };\r\n\r\n   // Applique le masque pour le format de code suivant : Premier caractère -> majuscule ou chiffre, caractères suivants -> chiffres, majuscules, _, -\r\n   item.appliquerMasqueCodeAlphaNum = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n\r\n      var optionsMask = {\r\n         translation: {\r\n            'Z': {\r\n               pattern: /[A-Za-z0-9]+/,\r\n               recursive: true\r\n            },\r\n            '0': {\r\n               pattern: /[A-Za-z0-9_\\-]+/,\r\n               recursive: true\r\n            }\r\n         },\r\n         onKeyPress: function (value, event) {\r\n            event.currentTarget.value = value.toUpperCase();\r\n         }\r\n      };\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-code-alpha-num').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var l_regexp = new RegExp('[A-Z0-9]+[A-Z0-9_\\-]*');\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.CODE_ALPHA_NUM_INVALID\");\r\n\r\n            item$.mask('Z' + repeatStringNumTimes('0', item$[0].maxLength - 1), optionsMask);\r\n            // item$.mask('Z' + '0'.repeat(item$[0].maxLength - 1), optionsMask);\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteur = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            var item$ = $(selecteur);\r\n            item$.mask('Z' + repeatStringNumTimes('0', item$[0].maxLength - 1), optionsMask);\r\n            // item$.mask('Z' + '0'.repeat(item$[0].maxLength - 1), optionsMask);\r\n         });\r\n      }\r\n   };\r\n\r\n   // Applique le masque pour le format de code suivant : Numéro de TVQ\r\n   item.appliquerMasqueTvq = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n\r\n      var optionsMask = {\r\n         translation: {\r\n            'T': {\r\n               pattern: /[t]|[T]/,\r\n               fallback: 'T'\r\n            },\r\n            'Q': {\r\n               pattern: /[Q]|[q]/,\r\n               fallback: 'Q'\r\n            }\r\n         },\r\n         onKeyPress: function (value, event) {\r\n            event.currentTarget.value = value.toUpperCase();\r\n         }\r\n      };\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-code-tvq').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var l_regexp = new RegExp('([0-9]{10})(\\T|\\t)(\\Q|\\q)([0-9]{04})');\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.CODE_TVQ_INVALID\");\r\n\r\n            item$.mask('0000000000TQ0000', optionsMask);\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteur = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            var item$ = $(selecteur);\r\n\r\n            item$.mask('0000000000TQ0000', optionsMask);\r\n\r\n         });\r\n      }\r\n   };\r\n\r\n   // Applique le masque pour le format de code suivant : Numéro de TVQ\r\n   item.appliquerMasqueTps = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n\r\n      var optionsMask = {\r\n         translation: {\r\n            'R': {\r\n               pattern: /[r]|[R]/,\r\n               fallback: 'R'\r\n            },\r\n            'T': {\r\n               pattern: /[t]|[T]/,\r\n               fallback: 'T'\r\n            }\r\n         },\r\n         onKeyPress: function (value, event) {\r\n            event.currentTarget.value = value.toUpperCase();\r\n         }\r\n      };\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-code-tps').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var l_regexp = new RegExp('([0-9]{9})(R|r)(T|t)([0-9]{04})');\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.CODE_TPS_INVALID\");\r\n\r\n            item$.mask('000000000RT0000', optionsMask);\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteur = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            var item$ = $(selecteur);\r\n\r\n            item$.mask('000000000RT0000', optionsMask);\r\n\r\n         });\r\n      }\r\n   };\r\n\r\n   // Applique le masque pour le format de code suivant : Ne doit contenir que des chiffres\r\n   item.appliquerMasqueCodeNum = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-code-num').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var l_regexp = new RegExp('[0-9]*');\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.CODE_NUM_INVALID\");\r\n            item$.mask('0' + repeatStringNumTimes('0', item$[0].maxLength - 1));\r\n            //item$.mask('0'.repeat(item$[0].maxLength - 1));\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteur = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            var item$ = $(selecteur);\r\n            item$.mask('0' + repeatStringNumTimes('0', item$[0].maxLength - 1));\r\n            // item$.mask('0'.repeat(item$[0].maxLength - 1));\r\n         });\r\n      }\r\n   };\r\n\r\n   // Applique le masque pour le format de code suivant : Ne doit contenir que des majuscules\r\n   item.appliquerMasqueCodeAlpha = function (listeItems) {\r\n      listeItems = listeItems === undefined ? '' : listeItems;\r\n\r\n      var optionsMask = {\r\n         onKeyPress: function (value, event) {\r\n            event.currentTarget.value = value.toUpperCase();\r\n         }\r\n      };\r\n\r\n      if (listeItems.length === 0) {\r\n         $('.shq-code-alpha').each(function (i, val) {\r\n            var l_item = val.id;\r\n            var item$ = $(diese.concat(l_item));\r\n            var l_regexp = new RegExp('[A-Z]*');\r\n            var l_message = apex.lang.formatMessage(\"SHQ.ITEM.CODE_ALPHA_INVALID\");\r\n            item$.mask(repeatStringNumTimes('S', item$[0].maxLength), optionsMask);\r\n            // item$.mask('S'.repeat(item$[0].maxLength - 1), optionsMask);\r\n\r\n            if (item$.is('pattern') === false) {\r\n               item$.attr('pattern', l_regexp.source);\r\n               item$.attr('data-valid-message', l_message);\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         $.each(listeItems, function (i, val) {\r\n            var selecteur = val.indexOf(diese, 0) === -1 ? diese.concat(val) : val;\r\n            var item$ = $(selecteur);\r\n            item$.mask(repeatStringNumTimes('S', item$[0].maxLength), optionsMask);\r\n            // item$.mask('S'.repeat(item$[0].maxLength - 1), optionsMask);\r\n         });\r\n      }\r\n   };\r\n\r\n   // \r\n   // Permet de vérifier si le enter a été pressé\r\n   // \r\n   item.enterPresse = function (event) {\r\n      var keyEnter = \"Enter\";\r\n      var key = event.key === undefined ? null : event.key;\r\n      return key === keyEnter ? true : false;\r\n   };\r\n   item.controlerInputPassword = function (event) {\r\n      var classIconMasque = \"fa-eye-slash\";\r\n      var classIconView = \"fa-eye\";\r\n\r\n      var $button = $(this);\r\n      var $spanButtonIcon = $(\"span\", $button);\r\n      var idInputPassword = diese.concat($button.data(\"id-input\"));\r\n      //\r\n      // Ajust le type de la balise input du password\r\n      // \r\n      var typeInput = $(idInputPassword).attr('type') === \"password\" ? \"text\" : \"password\";\r\n      $(idInputPassword).attr(\"type\", typeInput);\r\n      //\r\n      // Ajust l'icon selon le type de la balise input\r\n      // \r\n      if (typeInput === \"text\") {\r\n         $spanButtonIcon.removeClass(classIconView)\r\n            .addClass(classIconMasque);\r\n      } else {\r\n         $spanButtonIcon.removeClass(classIconMasque)\r\n            .addClass(classIconView);\r\n      }\r\n\r\n   };\r\n   item.visualiserInputPassword = function () {\r\n      //\r\n      // Applique la visualisation du mot de passe pour les éléments input de type password \r\n      // \r\n      $('.shq-visualiser-password').on(\"click\", shq.item.controlerInputPassword);\r\n\r\n   };\r\n\r\n   //\r\n   // Objet shq,apex,Jquery\r\n   //\r\n})(shq.item, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.page = {};\r\n\r\n(function (shq, page, ut, $) {\r\n   \"use strict\";\r\n   // \r\n   // Permet d'afficher une boite de confimation avec des libellés différent sur les boutons.\r\n   //\r\n   shq.page.confirm = function (pMessage, pCallback, pOkLabel, pCancelLabel) {\r\n      //\r\n      // Valeur original des boutons\r\n      //\r\n      var l_original_boutons = {\r\n         \"APEX.DIALOG.OK\": apex.lang.getMessage(\"APEX.DIALOG.OK\"),\r\n         \"APEX.DIALOG.CANCEL\": apex.lang.getMessage(\"APEX.DIALOG.CANCEL\")\r\n      };\r\n      //\r\n      //change les libellés des bouton \r\n      //      \r\n      apex.lang.addMessages({ \"APEX.DIALOG.OK\": pOkLabel });\r\n      apex.lang.addMessages({ \"APEX.DIALOG.CANCEL\": pCancelLabel });\r\n      //\r\n      // Affiche la boite de dialogue\r\n      //\r\n      apex.message.confirm(pMessage, pCallback);\r\n      //\r\n      //the timeout is required since APEX 19.2 due to a change in the apex.message.confirm\r\n      //\r\n      setTimeout(function () {\r\n         // Remet les boutons à leur valeur ortiginal\r\n         apex.lang.addMessages({ \"APEX.DIALOG.OK\": l_original_boutons[\"APEX.DIALOG.OK\"] });\r\n         apex.lang.addMessages({ \"APEX.DIALOG.CANCEL\": l_original_boutons[\"APEX.DIALOG.CANCEL\"] });\r\n      }, 0);\r\n   };\r\n   shq.page.alert = function (pMessage, pCallback, pOkLabel) {\r\n      //\r\n      // Valeur original des boutons\r\n      //\r\n      var l_original_boutons = {\r\n         \"APEX.DIALOG.OK\": apex.lang.getMessage(\"APEX.DIALOG.OK\"),\r\n      };\r\n      //\r\n      //change les libellés des bouton \r\n      //      \r\n      apex.lang.addMessages({ \"APEX.DIALOG.OK\": pOkLabel });      \r\n      //\r\n      // Affiche la boite de dialogue\r\n      //\r\n      apex.message.alert(pMessage, pCallback);\r\n       //\r\n      //the timeout is required since APEX 19.2 due to a change in the apex.message.confirm\r\n      //\r\n      setTimeout(function () {\r\n         // Remet les boutons à leur valeur ortiginal\r\n         apex.lang.addMessages({ \"APEX.DIALOG.OK\": l_original_boutons[\"APEX.DIALOG.OK\"] });\r\n      }, 0);\r\n   };\r\n})(shq, shq.page, apex.util, apex.jQuery);","/* global apex */\r\n/* global moment */\r\nvar shq = shq || {};\r\nshq.region = {};\r\n\r\n(function (region, shq, ut, $) {\r\n    \"use strict\";\r\n    //\r\n    var C_LOG_DEBUG = apex.debug.LOG_LEVEL.INFO;\r\n    var diese = '#';\r\n\r\n    region.appliquerSpinnerIframe = function (regionId) {\r\n\r\n        var region$ = $(diese.concat(regionId)),\r\n            iframe$ = region$.find('iframe'),\r\n            lSpinner$ = apex.util.showSpinner();\r\n\r\n        iframe$.on('load', function () {\r\n            lSpinner$.remove();\r\n\r\n        });\r\n    };\r\n})(shq.region, shq, apex.theme42, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.utl_menu = {};\r\n//\r\n// fonction pour le menu shq\r\n//\r\n(function (utl_menu, shq, $) {\r\n   \"use strict\";\r\n   //\r\n   // Gestion de l'autoration DEV pour APEX\r\n   // \r\n   utl_menu.appliquerCssAutorisationDev = function (autoration) {\r\n      var codeOui = 'O';\r\n      var codeNon = 'N';\r\n      var classAutoBg = 'u-warning',\r\n         classeAutoTexte = 'u-normal-text';\r\n      var selAutorisationDev = $('.t-NavigationBar a.t-Button.t-Button--icon.t-Button--header.t-Button--navBar .fa-user-secret').parent();\r\n      \r\n      if (selAutorisationDev.length) {\r\n         switch (autoration) {\r\n            case codeOui:\r\n               $(selAutorisationDev).removeClass(classAutoBg)\r\n                  .removeClass(classeAutoTexte);\r\n               break;\r\n            case codeNon:\r\n               $(selAutorisationDev).addClass(classAutoBg)\r\n                  .addClass(classeAutoTexte);\r\n               break;\r\n            default:\r\n               $(selAutorisationDev).removeClass(classAutoBg)\r\n                  .removeClass(classeAutoTexte);\r\n               break;\r\n         }\r\n      }\r\n   };\r\n   utl_menu.initialiserAutorisationDev = function () {\r\n      var processAutorisationDev = 'APX - Recuperer Autorisation DEV';\r\n      var messageErreurAjax = '\"ERREUR_MESSAGE_AJAX\"';\r\n\r\n      apex.server.process(processAutorisationDev)\r\n         .done(function (data) {\r\n            apex.debug.info(data);\r\n            utl_menu.appliquerCssAutorisationDev(data.autorisation_dev.valeur);\r\n         })\r\n         .fail(function () {\r\n            messageErreurAjax = messageErreurAjax.replace('%1', 'processAutorisationDev');\r\n            apex.message.showErrors(messageErreurAjax);\r\n            apex.debug.error(messageErreurAjax);\r\n         });\r\n   };\r\n   utl_menu.appliquerAutorisationDev = function () {\r\n      var processAutorisationDev = 'APX - MAJ Autorisation DEV';\r\n      var messageErreurAjax = '\"ERREUR_MESSAGE_AJAX\"';\r\n\r\n      apex.server.process(processAutorisationDev)\r\n         .done(function (data) {\r\n            apex.debug.info(data);\r\n            utl_menu.appliquerCssAutorisationDev(data.autorisation_dev.valeur);\r\n            apex.message.showPageSuccess(data.autorisation_dev.message);\r\n         })\r\n         .fail(function () {\r\n            messageErreurAjax = messageErreurAjax.replace('%1', 'processAutorisationDev');\r\n            apex.message.showErrors(messageErreurAjax);\r\n            apex.debug.error(messageErreurAjax);\r\n         });\r\n   };\r\n   //\r\n   // Contrôle le libellé du champs NOM_FONCT_PLSQL_LIBEL\r\n   // \r\n   utl_menu.controlerLibelleFonctExpression = function (codeTypeLibelle) {\r\n      var libellePlsql = 'Nom de la fonction PL/SQL';\r\n      var libelleExpressionSql = 'Expression SQL';\r\n      var codePLSQL = 'PLSQL';\r\n      var codeExpre = 'EXPRE';\r\n      var libelle;\r\n      var nomItemApex = 'P9_NOM_FONCT_PLSQL_LIBEL';\r\n\r\n      switch (codeTypeLibelle) {\r\n         case codePLSQL:\r\n            libelle = libellePlsql;\r\n            break;\r\n         case codeExpre:\r\n            libelle = libelleExpressionSql;\r\n            break;\r\n         default:\r\n            libelle = libellePlsql;\r\n      }\r\n      shq.item.changerLibelle(nomItemApex, libelle);\r\n   };\r\n   //\r\n   // Contrôle le libellé du champs NO_SEQ_PORTAIL_APPLI\r\n   // \r\n   utl_menu.controlerLibellePortailAppli = function (TypeAppli) {\r\n      var libelleApex = 'Application APEX';\r\n      var libelleForms = 'Application FORMS';\r\n      var codeApex = 'APEX';\r\n      var codeForms = 'FORMS';\r\n      var libelle;\r\n      var nomItemApex = 'P9_NO_SEQ_PORTAIL_APPLI';\r\n\r\n      switch (TypeAppli) {\r\n         case codeApex:\r\n            libelle = libelleApex;\r\n            break;\r\n         case codeForms:\r\n            libelle = libelleForms;\r\n            break;\r\n         default:\r\n            libelle = libelleApex;\r\n      }\r\n      shq.item.changerLibelle(nomItemApex, libelle);\r\n   };\r\n   shq.utl_menu.ouvrirLiensUrlFichier = function (fileUrl) {\r\n      var messageFichierUrl = apex.lang.formatMessageNoEscape(\"SHQ.MENU.OUVERTURE_FICHIER_URL\", fileUrl);\r\n      if (shq.isNavigateurIexplorer11()) {\r\n         var tampon = apex.navigation.openInNewWindow(fileUrl, '', { favorTabbedBrowsing: true });\r\n      } else {\r\n         apex.message.alert(messageFichierUrl);\r\n      }\r\n   };\r\n   shq.utl_menu.ouvrirLiensForms = function (formUrl, nomApplication) {\r\n      var messageFormsUrl = apex.lang.formatMessageNoEscape(\"SHQ.MENU.OUVERTURE_FORMS\", nomApplication);\r\n      /* \r\n       * Permet d'ouvrir plusieurs fenêtres pour une même application form\r\n       * Si même nom de nom d'application il récupère la fenêtre.\r\n      */\r\n      var dateOnglet = new Date();\r\n      var nombreMiliSecondeEcoule = dateOnglet.getTime();\r\n      nomApplication = typeof nomApplication === \"undefined\" ? \"\" : nomApplication;\r\n      nomApplication = $nvl(nomApplication, true) ? nomApplication.concat('_').concat(nombreMiliSecondeEcoule) : nombreMiliSecondeEcoule;\r\n\r\n      if (shq.isNavigateurIexplorer11() ||\r\n          shq.isNavigateurEdge() ) {\r\n         var width_win = Math.ceil(screen.width * 0.85);\r\n         var height_win = Math.ceil(screen.height * 0.75);\r\n         var tampon = apex.navigation.popup({ url: formUrl, name: nomApplication, width: width_win, height: height_win, menubar: \"yes\", statusbar: \"yes\" });\r\n      } else {\r\n         apex.message.alert(messageFormsUrl);\r\n      }\r\n   };\r\n   shq.utl_menu.ouvrirLiensIexplorer = function (Url, nomApplication) {\r\n      var messageFormsUrl = apex.lang.formatMessage(\"SHQ.MENU.OUVERTURE_URL_IEXPLORER\");\r\n      /* \r\n       * Permet d'ouvrir plusieurs fenêtres pour une même application form\r\n       * Si même nom de nom d'application il récupère la fenêtre.\r\n      */\r\n      var dateOnglet = new Date();\r\n      var nombreMiliSecondeEcoule = dateOnglet.getTime();\r\n      nomApplication = typeof nomApplication === \"undefined\" ? \"\" : nomApplication;\r\n      nomApplication = $nvl(nomApplication, true) ? nomApplication.concat('_').concat(nombreMiliSecondeEcoule) : nombreMiliSecondeEcoule;\r\n\r\n      if (shq.isNavigateurIexplorer11() ||      \r\n          shq.isNavigateurEdge()) {\r\n         var width_win = Math.ceil(screen.width * 0.85);\r\n         var height_win = Math.ceil(screen.height * 0.75);\r\n         var tampon = apex.navigation.popup({ url: Url, name: nomApplication, width: width_win, height: height_win, menubar: \"yes\", statusbar: \"yes\" });\r\n      } else {\r\n         apex.message.alert(messageFormsUrl);\r\n      }\r\n   };\r\n})(shq.utl_menu, shq, apex.jQuery);","/* global apex */\r\n\r\nvar shq = shq || {};\r\nshq.utl_portail = {};\r\n//\r\n// fonction pour le menu shq\r\n//\r\n(function (utl_portail, shq, $) {\r\n   \"use strict\";\r\n   //\r\n   // Évenement \"binder\"  pour l'ouverture et fermeture des applications affectées au messages\r\n   // \r\n   utl_portail.expandCollapseMessagePortail = function () {\r\n      var target = 'li.t-shq-portail-message';      \r\n      var addRemoveClassMessage = function (event) {\r\n         var currentExpand = 'is-current is-expanded';\r\n         var liTarget = event.currentTarget;\r\n\r\n         $(target).not(liTarget).each(function (index, element) {\r\n            $(element).removeClass(currentExpand);\r\n         });\r\n\r\n         var bidon =\r\n            $(liTarget).hasClass(currentExpand) ? $(liTarget).removeClass(currentExpand) : $(liTarget).addClass(currentExpand);\r\n\r\n      };\r\n     \r\n      $(target).on('click', function (event) {\r\n         addRemoveClassMessage(event);\r\n      });\r\n   };\r\n})(shq.utl_portail, shq, apex.jQuery);"]}